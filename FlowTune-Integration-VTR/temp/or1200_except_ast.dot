digraph G {	
ranksep=.25;
	0 [label="MODULE"];
	1 [label="IDENTIFIERS: or1200_except"];
	0 -> 1;
	2 [label="VAR_DECLARE_LIST"];
	0 -> 2;
	3 [label="VAR_DECLARE:  INPUT PORT"];
	2 -> 3;
	4 [label="IDENTIFIERS: clk"];
	3 -> 4;
	5 [label="VAR_DECLARE:  INPUT PORT"];
	2 -> 5;
	6 [label="IDENTIFIERS: rst"];
	5 -> 6;
	7 [label="VAR_DECLARE:  INPUT PORT"];
	2 -> 7;
	8 [label="IDENTIFIERS: sig_ibuserr"];
	7 -> 8;
	9 [label="VAR_DECLARE:  INPUT PORT"];
	2 -> 9;
	10 [label="IDENTIFIERS: sig_dbuserr"];
	9 -> 10;
	11 [label="VAR_DECLARE:  INPUT PORT"];
	2 -> 11;
	12 [label="IDENTIFIERS: sig_illegal"];
	11 -> 12;
	13 [label="VAR_DECLARE:  INPUT PORT"];
	2 -> 13;
	14 [label="IDENTIFIERS: sig_align"];
	13 -> 14;
	15 [label="VAR_DECLARE:  INPUT PORT"];
	2 -> 15;
	16 [label="IDENTIFIERS: sig_range"];
	15 -> 16;
	17 [label="VAR_DECLARE:  INPUT PORT"];
	2 -> 17;
	18 [label="IDENTIFIERS: sig_dtlbmiss"];
	17 -> 18;
	19 [label="VAR_DECLARE:  INPUT PORT"];
	2 -> 19;
	20 [label="IDENTIFIERS: sig_dmmufault"];
	19 -> 20;
	21 [label="VAR_DECLARE:  INPUT PORT"];
	2 -> 21;
	22 [label="IDENTIFIERS: sig_int"];
	21 -> 22;
	23 [label="VAR_DECLARE:  INPUT PORT"];
	2 -> 23;
	24 [label="IDENTIFIERS: sig_syscall"];
	23 -> 24;
	25 [label="VAR_DECLARE:  INPUT PORT"];
	2 -> 25;
	26 [label="IDENTIFIERS: sig_trap"];
	25 -> 26;
	27 [label="VAR_DECLARE:  INPUT PORT"];
	2 -> 27;
	28 [label="IDENTIFIERS: sig_itlbmiss"];
	27 -> 28;
	29 [label="VAR_DECLARE:  INPUT PORT"];
	2 -> 29;
	30 [label="IDENTIFIERS: sig_immufault"];
	29 -> 30;
	31 [label="VAR_DECLARE:  INPUT PORT"];
	2 -> 31;
	32 [label="IDENTIFIERS: sig_tick"];
	31 -> 32;
	33 [label="VAR_DECLARE:  INPUT PORT"];
	2 -> 33;
	34 [label="IDENTIFIERS: branch_taken"];
	33 -> 34;
	35 [label="VAR_DECLARE:  INPUT PORT"];
	2 -> 35;
	36 [label="IDENTIFIERS: icpu_ack_i"];
	35 -> 36;
	37 [label="VAR_DECLARE:  INPUT PORT"];
	2 -> 37;
	38 [label="IDENTIFIERS: icpu_err_i"];
	37 -> 38;
	39 [label="VAR_DECLARE:  INPUT PORT"];
	2 -> 39;
	40 [label="IDENTIFIERS: dcpu_ack_i"];
	39 -> 40;
	41 [label="VAR_DECLARE:  INPUT PORT"];
	2 -> 41;
	42 [label="IDENTIFIERS: dcpu_err_i"];
	41 -> 42;
	43 [label="VAR_DECLARE:  INPUT PORT"];
	2 -> 43;
	44 [label="IDENTIFIERS: genpc_freeze"];
	43 -> 44;
	45 [label="VAR_DECLARE:  INPUT PORT"];
	2 -> 45;
	46 [label="IDENTIFIERS: id_freeze"];
	45 -> 46;
	47 [label="VAR_DECLARE:  INPUT PORT"];
	2 -> 47;
	48 [label="IDENTIFIERS: ex_freeze"];
	47 -> 48;
	49 [label="VAR_DECLARE:  INPUT PORT"];
	2 -> 49;
	50 [label="IDENTIFIERS: wb_freeze"];
	49 -> 50;
	51 [label="VAR_DECLARE:  INPUT PORT"];
	2 -> 51;
	52 [label="IDENTIFIERS: if_stall"];
	51 -> 52;
	53 [label="VAR_DECLARE:  INPUT PORT"];
	2 -> 53;
	54 [label="IDENTIFIERS: if_pc"];
	53 -> 54;
	55 [label="NUMBERS: 00000000000000000000000000011111 ()"];
	53 -> 55;
	56 [label="NUMBERS: 00000000000000000000000000000000 ()"];
	53 -> 56;
	57 [label="VAR_DECLARE:  OUTPUT PORT"];
	2 -> 57;
	58 [label="IDENTIFIERS: id_pc"];
	57 -> 58;
	59 [label="NUMBERS: 00000000000000000000000000011111 ()"];
	57 -> 59;
	60 [label="NUMBERS: 00000000000000000000000000000000 ()"];
	57 -> 60;
	61 [label="VAR_DECLARE:  OUTPUT PORT"];
	2 -> 61;
	62 [label="IDENTIFIERS: lr_sav"];
	61 -> 62;
	63 [label="NUMBERS: 00000000000000000000000000011111 ()"];
	61 -> 63;
	64 [label="NUMBERS: 00000000000000000000000000000010 ()"];
	61 -> 64;
	65 [label="VAR_DECLARE:  OUTPUT PORT"];
	2 -> 65;
	66 [label="IDENTIFIERS: flushpipe"];
	65 -> 66;
	67 [label="VAR_DECLARE:  OUTPUT PORT"];
	2 -> 67;
	68 [label="IDENTIFIERS: extend_flush"];
	67 -> 68;
	69 [label="VAR_DECLARE:  OUTPUT PORT"];
	2 -> 69;
	70 [label="IDENTIFIERS: except_type"];
	69 -> 70;
	71 [label="BINARY_OPERATION: MIN"];
	69 -> 71;
	72 [label="NUMBERS: 00000000000000000000000000000100 ()"];
	71 -> 72;
	73 [label="NUMBERS: 00000000000000000000000000000001 ()"];
	71 -> 73;
	74 [label="NUMBERS: 00000000000000000000000000000000 ()"];
	69 -> 74;
	75 [label="VAR_DECLARE:  OUTPUT PORT"];
	2 -> 75;
	76 [label="IDENTIFIERS: except_start"];
	75 -> 76;
	77 [label="VAR_DECLARE:  OUTPUT PORT"];
	2 -> 77;
	78 [label="IDENTIFIERS: except_started"];
	77 -> 78;
	79 [label="VAR_DECLARE:  OUTPUT PORT"];
	2 -> 79;
	80 [label="IDENTIFIERS: except_stop"];
	79 -> 80;
	81 [label="NUMBERS: 00000000000000000000000000001100 ()"];
	79 -> 81;
	82 [label="NUMBERS: 00000000000000000000000000000000 ()"];
	79 -> 82;
	83 [label="VAR_DECLARE:  INPUT PORT"];
	2 -> 83;
	84 [label="IDENTIFIERS: ex_void"];
	83 -> 84;
	85 [label="VAR_DECLARE:  OUTPUT PORT"];
	2 -> 85;
	86 [label="IDENTIFIERS: spr_dat_ppc"];
	85 -> 86;
	87 [label="NUMBERS: 00000000000000000000000000011111 ()"];
	85 -> 87;
	88 [label="NUMBERS: 00000000000000000000000000000000 ()"];
	85 -> 88;
	89 [label="VAR_DECLARE:  OUTPUT PORT"];
	2 -> 89;
	90 [label="IDENTIFIERS: spr_dat_npc"];
	89 -> 90;
	91 [label="NUMBERS: 00000000000000000000000000011111 ()"];
	89 -> 91;
	92 [label="NUMBERS: 00000000000000000000000000000000 ()"];
	89 -> 92;
	93 [label="VAR_DECLARE:  INPUT PORT"];
	2 -> 93;
	94 [label="IDENTIFIERS: datain"];
	93 -> 94;
	95 [label="NUMBERS: 00000000000000000000000000011111 ()"];
	93 -> 95;
	96 [label="NUMBERS: 00000000000000000000000000000000 ()"];
	93 -> 96;
	97 [label="VAR_DECLARE:  INPUT PORT"];
	2 -> 97;
	98 [label="IDENTIFIERS: du_dsr"];
	97 -> 98;
	99 [label="BINARY_OPERATION: MIN"];
	97 -> 99;
	100 [label="NUMBERS: 00000000000000000000000000001110 ()"];
	99 -> 100;
	101 [label="NUMBERS: 00000000000000000000000000000001 ()"];
	99 -> 101;
	102 [label="NUMBERS: 00000000000000000000000000000000 ()"];
	97 -> 102;
	103 [label="VAR_DECLARE:  INPUT PORT"];
	2 -> 103;
	104 [label="IDENTIFIERS: epcr_we"];
	103 -> 104;
	105 [label="VAR_DECLARE:  INPUT PORT"];
	2 -> 105;
	106 [label="IDENTIFIERS: eear_we"];
	105 -> 106;
	107 [label="VAR_DECLARE:  INPUT PORT"];
	2 -> 107;
	108 [label="IDENTIFIERS: esr_we"];
	107 -> 108;
	109 [label="VAR_DECLARE:  INPUT PORT"];
	2 -> 109;
	110 [label="IDENTIFIERS: pc_we"];
	109 -> 110;
	111 [label="VAR_DECLARE:  OUTPUT PORT"];
	2 -> 111;
	112 [label="IDENTIFIERS: epcr"];
	111 -> 112;
	113 [label="NUMBERS: 00000000000000000000000000011111 ()"];
	111 -> 113;
	114 [label="NUMBERS: 00000000000000000000000000000000 ()"];
	111 -> 114;
	115 [label="VAR_DECLARE:  OUTPUT PORT"];
	2 -> 115;
	116 [label="IDENTIFIERS: eear"];
	115 -> 116;
	117 [label="NUMBERS: 00000000000000000000000000011111 ()"];
	115 -> 117;
	118 [label="NUMBERS: 00000000000000000000000000000000 ()"];
	115 -> 118;
	119 [label="VAR_DECLARE:  OUTPUT PORT"];
	2 -> 119;
	120 [label="IDENTIFIERS: esr"];
	119 -> 120;
	121 [label="BINARY_OPERATION: MIN"];
	119 -> 121;
	122 [label="NUMBERS: 00000000000000000000000000010000 ()"];
	121 -> 122;
	123 [label="NUMBERS: 00000000000000000000000000000001 ()"];
	121 -> 123;
	124 [label="NUMBERS: 00000000000000000000000000000000 ()"];
	119 -> 124;
	125 [label="VAR_DECLARE:  INPUT PORT"];
	2 -> 125;
	126 [label="IDENTIFIERS: lsu_addr"];
	125 -> 126;
	127 [label="NUMBERS: 00000000000000000000000000011111 ()"];
	125 -> 127;
	128 [label="NUMBERS: 00000000000000000000000000000000 ()"];
	125 -> 128;
	129 [label="VAR_DECLARE:  INPUT PORT"];
	2 -> 129;
	130 [label="IDENTIFIERS: sr_we"];
	129 -> 130;
	131 [label="VAR_DECLARE:  INPUT PORT"];
	2 -> 131;
	132 [label="IDENTIFIERS: to_sr"];
	131 -> 132;
	133 [label="BINARY_OPERATION: MIN"];
	131 -> 133;
	134 [label="NUMBERS: 00000000000000000000000000010000 ()"];
	133 -> 134;
	135 [label="NUMBERS: 00000000000000000000000000000001 ()"];
	133 -> 135;
	136 [label="NUMBERS: 00000000000000000000000000000000 ()"];
	131 -> 136;
	137 [label="VAR_DECLARE:  INPUT PORT"];
	2 -> 137;
	138 [label="IDENTIFIERS: sr"];
	137 -> 138;
	139 [label="BINARY_OPERATION: MIN"];
	137 -> 139;
	140 [label="NUMBERS: 00000000000000000000000000010000 ()"];
	139 -> 140;
	141 [label="NUMBERS: 00000000000000000000000000000001 ()"];
	139 -> 141;
	142 [label="NUMBERS: 00000000000000000000000000000000 ()"];
	137 -> 142;
	143 [label="VAR_DECLARE:  OUTPUT PORT"];
	2 -> 143;
	144 [label="IDENTIFIERS: abort_ex"];
	143 -> 144;
	145 [label="MODULE_ITEMS"];
	0 -> 145;
	146 [label="VAR_DECLARE_LIST"];
	145 -> 146;
	147 [label="VAR_DECLARE:  INPUT PORT"];
	146 -> 147;
	148 [label="IDENTIFIERS: clk"];
	147 -> 148;
	149 [label="VAR_DECLARE_LIST"];
	145 -> 149;
	150 [label="VAR_DECLARE:  INPUT PORT"];
	149 -> 150;
	151 [label="IDENTIFIERS: rst"];
	150 -> 151;
	152 [label="VAR_DECLARE_LIST"];
	145 -> 152;
	153 [label="VAR_DECLARE:  INPUT PORT"];
	152 -> 153;
	154 [label="IDENTIFIERS: sig_ibuserr"];
	153 -> 154;
	155 [label="VAR_DECLARE_LIST"];
	145 -> 155;
	156 [label="VAR_DECLARE:  INPUT PORT"];
	155 -> 156;
	157 [label="IDENTIFIERS: sig_dbuserr"];
	156 -> 157;
	158 [label="VAR_DECLARE_LIST"];
	145 -> 158;
	159 [label="VAR_DECLARE:  INPUT PORT"];
	158 -> 159;
	160 [label="IDENTIFIERS: sig_illegal"];
	159 -> 160;
	161 [label="VAR_DECLARE_LIST"];
	145 -> 161;
	162 [label="VAR_DECLARE:  INPUT PORT"];
	161 -> 162;
	163 [label="IDENTIFIERS: sig_align"];
	162 -> 163;
	164 [label="VAR_DECLARE_LIST"];
	145 -> 164;
	165 [label="VAR_DECLARE:  INPUT PORT"];
	164 -> 165;
	166 [label="IDENTIFIERS: sig_range"];
	165 -> 166;
	167 [label="VAR_DECLARE_LIST"];
	145 -> 167;
	168 [label="VAR_DECLARE:  INPUT PORT"];
	167 -> 168;
	169 [label="IDENTIFIERS: sig_dtlbmiss"];
	168 -> 169;
	170 [label="VAR_DECLARE_LIST"];
	145 -> 170;
	171 [label="VAR_DECLARE:  INPUT PORT"];
	170 -> 171;
	172 [label="IDENTIFIERS: sig_dmmufault"];
	171 -> 172;
	173 [label="VAR_DECLARE_LIST"];
	145 -> 173;
	174 [label="VAR_DECLARE:  INPUT PORT"];
	173 -> 174;
	175 [label="IDENTIFIERS: sig_int"];
	174 -> 175;
	176 [label="VAR_DECLARE_LIST"];
	145 -> 176;
	177 [label="VAR_DECLARE:  INPUT PORT"];
	176 -> 177;
	178 [label="IDENTIFIERS: sig_syscall"];
	177 -> 178;
	179 [label="VAR_DECLARE_LIST"];
	145 -> 179;
	180 [label="VAR_DECLARE:  INPUT PORT"];
	179 -> 180;
	181 [label="IDENTIFIERS: sig_trap"];
	180 -> 181;
	182 [label="VAR_DECLARE_LIST"];
	145 -> 182;
	183 [label="VAR_DECLARE:  INPUT PORT"];
	182 -> 183;
	184 [label="IDENTIFIERS: sig_itlbmiss"];
	183 -> 184;
	185 [label="VAR_DECLARE_LIST"];
	145 -> 185;
	186 [label="VAR_DECLARE:  INPUT PORT"];
	185 -> 186;
	187 [label="IDENTIFIERS: sig_immufault"];
	186 -> 187;
	188 [label="VAR_DECLARE_LIST"];
	145 -> 188;
	189 [label="VAR_DECLARE:  INPUT PORT"];
	188 -> 189;
	190 [label="IDENTIFIERS: sig_tick"];
	189 -> 190;
	191 [label="VAR_DECLARE_LIST"];
	145 -> 191;
	192 [label="VAR_DECLARE:  INPUT PORT"];
	191 -> 192;
	193 [label="IDENTIFIERS: branch_taken"];
	192 -> 193;
	194 [label="VAR_DECLARE_LIST"];
	145 -> 194;
	195 [label="VAR_DECLARE:  INPUT PORT"];
	194 -> 195;
	196 [label="IDENTIFIERS: genpc_freeze"];
	195 -> 196;
	197 [label="VAR_DECLARE_LIST"];
	145 -> 197;
	198 [label="VAR_DECLARE:  INPUT PORT"];
	197 -> 198;
	199 [label="IDENTIFIERS: id_freeze"];
	198 -> 199;
	200 [label="VAR_DECLARE_LIST"];
	145 -> 200;
	201 [label="VAR_DECLARE:  INPUT PORT"];
	200 -> 201;
	202 [label="IDENTIFIERS: ex_freeze"];
	201 -> 202;
	203 [label="VAR_DECLARE_LIST"];
	145 -> 203;
	204 [label="VAR_DECLARE:  INPUT PORT"];
	203 -> 204;
	205 [label="IDENTIFIERS: wb_freeze"];
	204 -> 205;
	206 [label="VAR_DECLARE_LIST"];
	145 -> 206;
	207 [label="VAR_DECLARE:  INPUT PORT"];
	206 -> 207;
	208 [label="IDENTIFIERS: if_stall"];
	207 -> 208;
	209 [label="VAR_DECLARE_LIST"];
	145 -> 209;
	210 [label="VAR_DECLARE:  INPUT PORT"];
	209 -> 210;
	211 [label="IDENTIFIERS: if_pc"];
	210 -> 211;
	212 [label="NUMBERS: 00000000000000000000000000011111 ()"];
	210 -> 212;
	213 [label="NUMBERS: 00000000000000000000000000000000 ()"];
	210 -> 213;
	214 [label="VAR_DECLARE_LIST"];
	145 -> 214;
	215 [label="VAR_DECLARE:  OUTPUT PORT"];
	214 -> 215;
	216 [label="IDENTIFIERS: id_pc"];
	215 -> 216;
	217 [label="NUMBERS: 00000000000000000000000000011111 ()"];
	215 -> 217;
	218 [label="NUMBERS: 00000000000000000000000000000000 ()"];
	215 -> 218;
	219 [label="VAR_DECLARE_LIST"];
	145 -> 219;
	220 [label="VAR_DECLARE:  OUTPUT PORT"];
	219 -> 220;
	221 [label="IDENTIFIERS: lr_sav"];
	220 -> 221;
	222 [label="NUMBERS: 00000000000000000000000000011111 ()"];
	220 -> 222;
	223 [label="NUMBERS: 00000000000000000000000000000010 ()"];
	220 -> 223;
	224 [label="VAR_DECLARE_LIST"];
	145 -> 224;
	225 [label="VAR_DECLARE:  INPUT PORT"];
	224 -> 225;
	226 [label="IDENTIFIERS: datain"];
	225 -> 226;
	227 [label="NUMBERS: 00000000000000000000000000011111 ()"];
	225 -> 227;
	228 [label="NUMBERS: 00000000000000000000000000000000 ()"];
	225 -> 228;
	229 [label="VAR_DECLARE_LIST"];
	145 -> 229;
	230 [label="VAR_DECLARE:  INPUT PORT"];
	229 -> 230;
	231 [label="IDENTIFIERS: du_dsr"];
	230 -> 231;
	232 [label="BINARY_OPERATION: MIN"];
	230 -> 232;
	233 [label="NUMBERS: 00000000000000000000000000001110 ()"];
	232 -> 233;
	234 [label="NUMBERS: 00000000000000000000000000000001 ()"];
	232 -> 234;
	235 [label="NUMBERS: 00000000000000000000000000000000 ()"];
	230 -> 235;
	236 [label="VAR_DECLARE_LIST"];
	145 -> 236;
	237 [label="VAR_DECLARE:  INPUT PORT"];
	236 -> 237;
	238 [label="IDENTIFIERS: epcr_we"];
	237 -> 238;
	239 [label="VAR_DECLARE_LIST"];
	145 -> 239;
	240 [label="VAR_DECLARE:  INPUT PORT"];
	239 -> 240;
	241 [label="IDENTIFIERS: eear_we"];
	240 -> 241;
	242 [label="VAR_DECLARE_LIST"];
	145 -> 242;
	243 [label="VAR_DECLARE:  INPUT PORT"];
	242 -> 243;
	244 [label="IDENTIFIERS: esr_we"];
	243 -> 244;
	245 [label="VAR_DECLARE_LIST"];
	145 -> 245;
	246 [label="VAR_DECLARE:  INPUT PORT"];
	245 -> 246;
	247 [label="IDENTIFIERS: pc_we"];
	246 -> 247;
	248 [label="VAR_DECLARE_LIST"];
	145 -> 248;
	249 [label="VAR_DECLARE:  OUTPUT PORT"];
	248 -> 249;
	250 [label="IDENTIFIERS: epcr"];
	249 -> 250;
	251 [label="NUMBERS: 00000000000000000000000000011111 ()"];
	249 -> 251;
	252 [label="NUMBERS: 00000000000000000000000000000000 ()"];
	249 -> 252;
	253 [label="VAR_DECLARE_LIST"];
	145 -> 253;
	254 [label="VAR_DECLARE:  OUTPUT PORT"];
	253 -> 254;
	255 [label="IDENTIFIERS: eear"];
	254 -> 255;
	256 [label="NUMBERS: 00000000000000000000000000011111 ()"];
	254 -> 256;
	257 [label="NUMBERS: 00000000000000000000000000000000 ()"];
	254 -> 257;
	258 [label="VAR_DECLARE_LIST"];
	145 -> 258;
	259 [label="VAR_DECLARE:  OUTPUT PORT"];
	258 -> 259;
	260 [label="IDENTIFIERS: esr"];
	259 -> 260;
	261 [label="BINARY_OPERATION: MIN"];
	259 -> 261;
	262 [label="NUMBERS: 00000000000000000000000000010000 ()"];
	261 -> 262;
	263 [label="NUMBERS: 00000000000000000000000000000001 ()"];
	261 -> 263;
	264 [label="NUMBERS: 00000000000000000000000000000000 ()"];
	259 -> 264;
	265 [label="VAR_DECLARE_LIST"];
	145 -> 265;
	266 [label="VAR_DECLARE:  INPUT PORT"];
	265 -> 266;
	267 [label="IDENTIFIERS: to_sr"];
	266 -> 267;
	268 [label="BINARY_OPERATION: MIN"];
	266 -> 268;
	269 [label="NUMBERS: 00000000000000000000000000010000 ()"];
	268 -> 269;
	270 [label="NUMBERS: 00000000000000000000000000000001 ()"];
	268 -> 270;
	271 [label="NUMBERS: 00000000000000000000000000000000 ()"];
	266 -> 271;
	272 [label="VAR_DECLARE_LIST"];
	145 -> 272;
	273 [label="VAR_DECLARE:  INPUT PORT"];
	272 -> 273;
	274 [label="IDENTIFIERS: sr_we"];
	273 -> 274;
	275 [label="VAR_DECLARE_LIST"];
	145 -> 275;
	276 [label="VAR_DECLARE:  INPUT PORT"];
	275 -> 276;
	277 [label="IDENTIFIERS: sr"];
	276 -> 277;
	278 [label="BINARY_OPERATION: MIN"];
	276 -> 278;
	279 [label="NUMBERS: 00000000000000000000000000010000 ()"];
	278 -> 279;
	280 [label="NUMBERS: 00000000000000000000000000000001 ()"];
	278 -> 280;
	281 [label="NUMBERS: 00000000000000000000000000000000 ()"];
	276 -> 281;
	282 [label="VAR_DECLARE_LIST"];
	145 -> 282;
	283 [label="VAR_DECLARE:  INPUT PORT"];
	282 -> 283;
	284 [label="IDENTIFIERS: lsu_addr"];
	283 -> 284;
	285 [label="NUMBERS: 00000000000000000000000000011111 ()"];
	283 -> 285;
	286 [label="NUMBERS: 00000000000000000000000000000000 ()"];
	283 -> 286;
	287 [label="VAR_DECLARE_LIST"];
	145 -> 287;
	288 [label="VAR_DECLARE:  OUTPUT PORT"];
	287 -> 288;
	289 [label="IDENTIFIERS: flushpipe"];
	288 -> 289;
	290 [label="VAR_DECLARE_LIST"];
	145 -> 290;
	291 [label="VAR_DECLARE:  OUTPUT PORT"];
	290 -> 291;
	292 [label="IDENTIFIERS: extend_flush"];
	291 -> 292;
	293 [label="VAR_DECLARE_LIST"];
	145 -> 293;
	294 [label="VAR_DECLARE:  OUTPUT PORT"];
	293 -> 294;
	295 [label="IDENTIFIERS: except_type"];
	294 -> 295;
	296 [label="BINARY_OPERATION: MIN"];
	294 -> 296;
	297 [label="NUMBERS: 00000000000000000000000000000100 ()"];
	296 -> 297;
	298 [label="NUMBERS: 00000000000000000000000000000001 ()"];
	296 -> 298;
	299 [label="NUMBERS: 00000000000000000000000000000000 ()"];
	294 -> 299;
	300 [label="VAR_DECLARE_LIST"];
	145 -> 300;
	301 [label="VAR_DECLARE:  OUTPUT PORT"];
	300 -> 301;
	302 [label="IDENTIFIERS: except_start"];
	301 -> 302;
	303 [label="VAR_DECLARE_LIST"];
	145 -> 303;
	304 [label="VAR_DECLARE:  OUTPUT PORT"];
	303 -> 304;
	305 [label="IDENTIFIERS: except_started"];
	304 -> 305;
	306 [label="VAR_DECLARE_LIST"];
	145 -> 306;
	307 [label="VAR_DECLARE:  OUTPUT PORT"];
	306 -> 307;
	308 [label="IDENTIFIERS: except_stop"];
	307 -> 308;
	309 [label="NUMBERS: 00000000000000000000000000001100 ()"];
	307 -> 309;
	310 [label="NUMBERS: 00000000000000000000000000000000 ()"];
	307 -> 310;
	311 [label="VAR_DECLARE_LIST"];
	145 -> 311;
	312 [label="VAR_DECLARE:  INPUT PORT"];
	311 -> 312;
	313 [label="IDENTIFIERS: ex_void"];
	312 -> 313;
	314 [label="VAR_DECLARE_LIST"];
	145 -> 314;
	315 [label="VAR_DECLARE:  OUTPUT PORT"];
	314 -> 315;
	316 [label="IDENTIFIERS: spr_dat_ppc"];
	315 -> 316;
	317 [label="NUMBERS: 00000000000000000000000000011111 ()"];
	315 -> 317;
	318 [label="NUMBERS: 00000000000000000000000000000000 ()"];
	315 -> 318;
	319 [label="VAR_DECLARE_LIST"];
	145 -> 319;
	320 [label="VAR_DECLARE:  OUTPUT PORT"];
	319 -> 320;
	321 [label="IDENTIFIERS: spr_dat_npc"];
	320 -> 321;
	322 [label="NUMBERS: 00000000000000000000000000011111 ()"];
	320 -> 322;
	323 [label="NUMBERS: 00000000000000000000000000000000 ()"];
	320 -> 323;
	324 [label="VAR_DECLARE_LIST"];
	145 -> 324;
	325 [label="VAR_DECLARE:  OUTPUT PORT"];
	324 -> 325;
	326 [label="IDENTIFIERS: abort_ex"];
	325 -> 326;
	327 [label="VAR_DECLARE_LIST"];
	145 -> 327;
	328 [label="VAR_DECLARE:  INPUT PORT"];
	327 -> 328;
	329 [label="IDENTIFIERS: icpu_ack_i"];
	328 -> 329;
	330 [label="VAR_DECLARE_LIST"];
	145 -> 330;
	331 [label="VAR_DECLARE:  INPUT PORT"];
	330 -> 331;
	332 [label="IDENTIFIERS: icpu_err_i"];
	331 -> 332;
	333 [label="VAR_DECLARE_LIST"];
	145 -> 333;
	334 [label="VAR_DECLARE:  INPUT PORT"];
	333 -> 334;
	335 [label="IDENTIFIERS: dcpu_ack_i"];
	334 -> 335;
	336 [label="VAR_DECLARE_LIST"];
	145 -> 336;
	337 [label="VAR_DECLARE:  INPUT PORT"];
	336 -> 337;
	338 [label="IDENTIFIERS: dcpu_err_i"];
	337 -> 338;
	339 [label="VAR_DECLARE_LIST"];
	145 -> 339;
	340 [label="VAR_DECLARE:  REG"];
	339 -> 340;
	341 [label="IDENTIFIERS: except_type"];
	340 -> 341;
	342 [label="BINARY_OPERATION: MIN"];
	340 -> 342;
	343 [label="NUMBERS: 00000000000000000000000000000100 ()"];
	342 -> 343;
	344 [label="NUMBERS: 00000000000000000000000000000001 ()"];
	342 -> 344;
	345 [label="NUMBERS: 00000000000000000000000000000000 ()"];
	340 -> 345;
	346 [label="VAR_DECLARE_LIST"];
	145 -> 346;
	347 [label="VAR_DECLARE:  REG"];
	346 -> 347;
	348 [label="IDENTIFIERS: id_pc"];
	347 -> 348;
	349 [label="NUMBERS: 00000000000000000000000000011111 ()"];
	347 -> 349;
	350 [label="NUMBERS: 00000000000000000000000000000000 ()"];
	347 -> 350;
	351 [label="VAR_DECLARE_LIST"];
	145 -> 351;
	352 [label="VAR_DECLARE:  REG"];
	351 -> 352;
	353 [label="IDENTIFIERS: ex_pc"];
	352 -> 353;
	354 [label="NUMBERS: 00000000000000000000000000011111 ()"];
	352 -> 354;
	355 [label="NUMBERS: 00000000000000000000000000000000 ()"];
	352 -> 355;
	356 [label="VAR_DECLARE_LIST"];
	145 -> 356;
	357 [label="VAR_DECLARE:  REG"];
	356 -> 357;
	358 [label="IDENTIFIERS: wb_pc"];
	357 -> 358;
	359 [label="NUMBERS: 00000000000000000000000000011111 ()"];
	357 -> 359;
	360 [label="NUMBERS: 00000000000000000000000000000000 ()"];
	357 -> 360;
	361 [label="VAR_DECLARE_LIST"];
	145 -> 361;
	362 [label="VAR_DECLARE:  REG"];
	361 -> 362;
	363 [label="IDENTIFIERS: epcr"];
	362 -> 363;
	364 [label="NUMBERS: 00000000000000000000000000011111 ()"];
	362 -> 364;
	365 [label="NUMBERS: 00000000000000000000000000000000 ()"];
	362 -> 365;
	366 [label="VAR_DECLARE_LIST"];
	145 -> 366;
	367 [label="VAR_DECLARE:  REG"];
	366 -> 367;
	368 [label="IDENTIFIERS: eear"];
	367 -> 368;
	369 [label="NUMBERS: 00000000000000000000000000011111 ()"];
	367 -> 369;
	370 [label="NUMBERS: 00000000000000000000000000000000 ()"];
	367 -> 370;
	371 [label="VAR_DECLARE_LIST"];
	145 -> 371;
	372 [label="VAR_DECLARE:  REG"];
	371 -> 372;
	373 [label="IDENTIFIERS: esr"];
	372 -> 373;
	374 [label="BINARY_OPERATION: MIN"];
	372 -> 374;
	375 [label="NUMBERS: 00000000000000000000000000010000 ()"];
	374 -> 375;
	376 [label="NUMBERS: 00000000000000000000000000000001 ()"];
	374 -> 376;
	377 [label="NUMBERS: 00000000000000000000000000000000 ()"];
	372 -> 377;
	378 [label="VAR_DECLARE_LIST"];
	145 -> 378;
	379 [label="VAR_DECLARE:  REG"];
	378 -> 379;
	380 [label="IDENTIFIERS: id_exceptflags"];
	379 -> 380;
	381 [label="NUMBERS: 00000000000000000000000000000010 ()"];
	379 -> 381;
	382 [label="NUMBERS: 00000000000000000000000000000000 ()"];
	379 -> 382;
	383 [label="VAR_DECLARE_LIST"];
	145 -> 383;
	384 [label="VAR_DECLARE:  REG"];
	383 -> 384;
	385 [label="IDENTIFIERS: ex_exceptflags"];
	384 -> 385;
	386 [label="NUMBERS: 00000000000000000000000000000010 ()"];
	384 -> 386;
	387 [label="NUMBERS: 00000000000000000000000000000000 ()"];
	384 -> 387;
	388 [label="VAR_DECLARE_LIST"];
	145 -> 388;
	389 [label="VAR_DECLARE:  REG"];
	388 -> 389;
	390 [label="IDENTIFIERS: state"];
	389 -> 390;
	391 [label="BINARY_OPERATION: MIN"];
	389 -> 391;
	392 [label="NUMBERS: 00000000000000000000000000000011 ()"];
	391 -> 392;
	393 [label="NUMBERS: 00000000000000000000000000000001 ()"];
	391 -> 393;
	394 [label="NUMBERS: 00000000000000000000000000000000 ()"];
	389 -> 394;
	395 [label="VAR_DECLARE_LIST"];
	145 -> 395;
	396 [label="VAR_DECLARE:  REG"];
	395 -> 396;
	397 [label="IDENTIFIERS: extend_flush"];
	396 -> 397;
	398 [label="VAR_DECLARE_LIST"];
	145 -> 398;
	399 [label="VAR_DECLARE:  REG"];
	398 -> 399;
	400 [label="IDENTIFIERS: extend_flush_last"];
	399 -> 400;
	401 [label="VAR_DECLARE_LIST"];
	145 -> 401;
	402 [label="VAR_DECLARE:  REG"];
	401 -> 402;
	403 [label="IDENTIFIERS: ex_dslot"];
	402 -> 403;
	404 [label="VAR_DECLARE_LIST"];
	145 -> 404;
	405 [label="VAR_DECLARE:  REG"];
	404 -> 405;
	406 [label="IDENTIFIERS: delayed1_ex_dslot"];
	405 -> 406;
	407 [label="VAR_DECLARE_LIST"];
	145 -> 407;
	408 [label="VAR_DECLARE:  REG"];
	407 -> 408;
	409 [label="IDENTIFIERS: delayed2_ex_dslot"];
	408 -> 409;
	410 [label="VAR_DECLARE_LIST"];
	145 -> 410;
	411 [label="VAR_DECLARE:  WIRE"];
	410 -> 411;
	412 [label="IDENTIFIERS: except_started"];
	411 -> 412;
	413 [label="VAR_DECLARE_LIST"];
	145 -> 413;
	414 [label="VAR_DECLARE:  WIRE"];
	413 -> 414;
	415 [label="IDENTIFIERS: except_trig"];
	414 -> 415;
	416 [label="NUMBERS: 00000000000000000000000000001100 ()"];
	414 -> 416;
	417 [label="NUMBERS: 00000000000000000000000000000000 ()"];
	414 -> 417;
	418 [label="VAR_DECLARE_LIST"];
	145 -> 418;
	419 [label="VAR_DECLARE:  WIRE"];
	418 -> 419;
	420 [label="IDENTIFIERS: except_flushpipe"];
	419 -> 420;
	421 [label="VAR_DECLARE_LIST"];
	145 -> 421;
	422 [label="VAR_DECLARE:  REG"];
	421 -> 422;
	423 [label="IDENTIFIERS: delayed_iee"];
	422 -> 423;
	424 [label="NUMBERS: 00000000000000000000000000000010 ()"];
	422 -> 424;
	425 [label="NUMBERS: 00000000000000000000000000000000 ()"];
	422 -> 425;
	426 [label="VAR_DECLARE_LIST"];
	145 -> 426;
	427 [label="VAR_DECLARE:  REG"];
	426 -> 427;
	428 [label="IDENTIFIERS: delayed_tee"];
	427 -> 428;
	429 [label="NUMBERS: 00000000000000000000000000000010 ()"];
	427 -> 429;
	430 [label="NUMBERS: 00000000000000000000000000000000 ()"];
	427 -> 430;
	431 [label="VAR_DECLARE_LIST"];
	145 -> 431;
	432 [label="VAR_DECLARE:  WIRE"];
	431 -> 432;
	433 [label="IDENTIFIERS: int_pending"];
	432 -> 433;
	434 [label="VAR_DECLARE_LIST"];
	145 -> 434;
	435 [label="VAR_DECLARE:  WIRE"];
	434 -> 435;
	436 [label="IDENTIFIERS: tick_pending"];
	435 -> 436;
	437 [label="ASSIGN"];
	145 -> 437;
	438 [label="BLOCKING_STATEMENT"];
	437 -> 438;
	439 [label="IDENTIFIERS: except_started"];
	438 -> 439;
	440 [label="BINARY_OPERATION: bAND"];
	438 -> 440;
	441 [label="IDENTIFIERS: extend_flush"];
	440 -> 441;
	442 [label="IDENTIFIERS: except_start"];
	440 -> 442;
	443 [label="ASSIGN"];
	145 -> 443;
	444 [label="BLOCKING_STATEMENT"];
	443 -> 444;
	445 [label="IDENTIFIERS: lr_sav"];
	444 -> 445;
	446 [label="RANGE_REF"];
	444 -> 446;
	447 [label="IDENTIFIERS: ex_pc"];
	446 -> 447;
	448 [label="NUMBERS: 00000000000000000000000000011111 ()"];
	446 -> 448;
	449 [label="NUMBERS: 00000000000000000000000000000010 ()"];
	446 -> 449;
	450 [label="ASSIGN"];
	145 -> 450;
	451 [label="BLOCKING_STATEMENT"];
	450 -> 451;
	452 [label="IDENTIFIERS: spr_dat_ppc"];
	451 -> 452;
	453 [label="IDENTIFIERS: wb_pc"];
	451 -> 453;
	454 [label="ASSIGN"];
	145 -> 454;
	455 [label="BLOCKING_STATEMENT"];
	454 -> 455;
	456 [label="IDENTIFIERS: spr_dat_npc"];
	455 -> 456;
	457 [label="IF_Q"];
	455 -> 457;
	458 [label="IDENTIFIERS: ex_void"];
	457 -> 458;
	459 [label="IDENTIFIERS: id_pc"];
	457 -> 459;
	460 [label="IDENTIFIERS: ex_pc"];
	457 -> 460;
	461 [label="ASSIGN"];
	145 -> 461;
	462 [label="BLOCKING_STATEMENT"];
	461 -> 462;
	463 [label="IDENTIFIERS: except_start"];
	462 -> 463;
	464 [label="BINARY_OPERATION: bAND"];
	462 -> 464;
	465 [label="BINARY_OPERATION: lNEQ"];
	464 -> 465;
	466 [label="IDENTIFIERS: except_type"];
	465 -> 466;
	467 [label="NUMBERS: 0000 ()"];
	465 -> 467;
	468 [label="IDENTIFIERS: extend_flush"];
	464 -> 468;
	469 [label="ASSIGN"];
	145 -> 469;
	470 [label="BLOCKING_STATEMENT"];
	469 -> 470;
	471 [label="IDENTIFIERS: int_pending"];
	470 -> 471;
	472 [label="BINARY_OPERATION: bAND"];
	470 -> 472;
	473 [label="BINARY_OPERATION: bAND"];
	472 -> 473;
	474 [label="BINARY_OPERATION: bAND"];
	473 -> 474;
	475 [label="BINARY_OPERATION: bAND"];
	474 -> 475;
	476 [label="BINARY_OPERATION: bAND"];
	475 -> 476;
	477 [label="BINARY_OPERATION: bAND"];
	476 -> 477;
	478 [label="IDENTIFIERS: sig_int"];
	477 -> 478;
	479 [label="ARRAY_REF"];
	477 -> 479;
	480 [label="IDENTIFIERS: sr"];
	479 -> 480;
	481 [label="NUMBERS: 00000000000000000000000000000010 ()"];
	479 -> 481;
	482 [label="ARRAY_REF"];
	476 -> 482;
	483 [label="IDENTIFIERS: delayed_iee"];
	482 -> 483;
	484 [label="NUMBERS: 00000000000000000000000000000010 ()"];
	482 -> 484;
	485 [label="UNARY_OPERATION: bNOT"];
	475 -> 485;
	486 [label="IDENTIFIERS: ex_freeze"];
	485 -> 486;
	487 [label="UNARY_OPERATION: bNOT"];
	474 -> 487;
	488 [label="IDENTIFIERS: branch_taken"];
	487 -> 488;
	489 [label="UNARY_OPERATION: bNOT"];
	473 -> 489;
	490 [label="IDENTIFIERS: ex_dslot"];
	489 -> 490;
	491 [label="UNARY_OPERATION: bNOT"];
	472 -> 491;
	492 [label="IDENTIFIERS: sr_we"];
	491 -> 492;
	493 [label="ASSIGN"];
	145 -> 493;
	494 [label="BLOCKING_STATEMENT"];
	493 -> 494;
	495 [label="IDENTIFIERS: tick_pending"];
	494 -> 495;
	496 [label="BINARY_OPERATION: bAND"];
	494 -> 496;
	497 [label="BINARY_OPERATION: bAND"];
	496 -> 497;
	498 [label="BINARY_OPERATION: bAND"];
	497 -> 498;
	499 [label="BINARY_OPERATION: bAND"];
	498 -> 499;
	500 [label="BINARY_OPERATION: bAND"];
	499 -> 500;
	501 [label="IDENTIFIERS: sig_tick"];
	500 -> 501;
	502 [label="ARRAY_REF"];
	500 -> 502;
	503 [label="IDENTIFIERS: sr"];
	502 -> 503;
	504 [label="NUMBERS: 00000000000000000000000000000001 ()"];
	502 -> 504;
	505 [label="UNARY_OPERATION: bNOT"];
	499 -> 505;
	506 [label="IDENTIFIERS: ex_freeze"];
	505 -> 506;
	507 [label="UNARY_OPERATION: bNOT"];
	498 -> 507;
	508 [label="IDENTIFIERS: branch_taken"];
	507 -> 508;
	509 [label="UNARY_OPERATION: bNOT"];
	497 -> 509;
	510 [label="IDENTIFIERS: ex_dslot"];
	509 -> 510;
	511 [label="UNARY_OPERATION: bNOT"];
	496 -> 511;
	512 [label="IDENTIFIERS: sr_we"];
	511 -> 512;
	513 [label="ASSIGN"];
	145 -> 513;
	514 [label="BLOCKING_STATEMENT"];
	513 -> 514;
	515 [label="IDENTIFIERS: abort_ex"];
	514 -> 515;
	516 [label="BINARY_OPERATION: bOR"];
	514 -> 516;
	517 [label="BINARY_OPERATION: bOR"];
	516 -> 517;
	518 [label="BINARY_OPERATION: bOR"];
	517 -> 518;
	519 [label="BINARY_OPERATION: bOR"];
	518 -> 519;
	520 [label="IDENTIFIERS: sig_dbuserr"];
	519 -> 520;
	521 [label="IDENTIFIERS: sig_dmmufault"];
	519 -> 521;
	522 [label="IDENTIFIERS: sig_dtlbmiss"];
	518 -> 522;
	523 [label="IDENTIFIERS: sig_align"];
	517 -> 523;
	524 [label="IDENTIFIERS: sig_illegal"];
	516 -> 524;
	525 [label="ASSIGN"];
	145 -> 525;
	526 [label="BLOCKING_STATEMENT"];
	525 -> 526;
	527 [label="IDENTIFIERS: except_trig"];
	526 -> 527;
	528 [label="CONCATENATE"];
	526 -> 528;
	529 [label="BINARY_OPERATION: bAND"];
	528 -> 529;
	530 [label="IDENTIFIERS: tick_pending"];
	529 -> 530;
	531 [label="UNARY_OPERATION: bNOT"];
	529 -> 531;
	532 [label="ARRAY_REF"];
	531 -> 532;
	533 [label="IDENTIFIERS: du_dsr"];
	532 -> 533;
	534 [label="NUMBERS: 00000000000000000000000000000100 ()"];
	532 -> 534;
	535 [label="BINARY_OPERATION: bAND"];
	528 -> 535;
	536 [label="IDENTIFIERS: int_pending"];
	535 -> 536;
	537 [label="UNARY_OPERATION: bNOT"];
	535 -> 537;
	538 [label="ARRAY_REF"];
	537 -> 538;
	539 [label="IDENTIFIERS: du_dsr"];
	538 -> 539;
	540 [label="NUMBERS: 00000000000000000000000000000111 ()"];
	538 -> 540;
	541 [label="BINARY_OPERATION: bAND"];
	528 -> 541;
	542 [label="ARRAY_REF"];
	541 -> 542;
	543 [label="IDENTIFIERS: ex_exceptflags"];
	542 -> 543;
	544 [label="NUMBERS: 00000000000000000000000000000001 ()"];
	542 -> 544;
	545 [label="UNARY_OPERATION: bNOT"];
	541 -> 545;
	546 [label="ARRAY_REF"];
	545 -> 546;
	547 [label="IDENTIFIERS: du_dsr"];
	546 -> 547;
	548 [label="NUMBERS: 00000000000000000000000000001001 ()"];
	546 -> 548;
	549 [label="BINARY_OPERATION: bAND"];
	528 -> 549;
	550 [label="ARRAY_REF"];
	549 -> 550;
	551 [label="IDENTIFIERS: ex_exceptflags"];
	550 -> 551;
	552 [label="NUMBERS: 00000000000000000000000000000000 ()"];
	550 -> 552;
	553 [label="UNARY_OPERATION: bNOT"];
	549 -> 553;
	554 [label="ARRAY_REF"];
	553 -> 554;
	555 [label="IDENTIFIERS: du_dsr"];
	554 -> 555;
	556 [label="NUMBERS: 00000000000000000000000000000011 ()"];
	554 -> 556;
	557 [label="BINARY_OPERATION: bAND"];
	528 -> 557;
	558 [label="ARRAY_REF"];
	557 -> 558;
	559 [label="IDENTIFIERS: ex_exceptflags"];
	558 -> 559;
	560 [label="NUMBERS: 00000000000000000000000000000010 ()"];
	558 -> 560;
	561 [label="UNARY_OPERATION: bNOT"];
	557 -> 561;
	562 [label="ARRAY_REF"];
	561 -> 562;
	563 [label="IDENTIFIERS: du_dsr"];
	562 -> 563;
	564 [label="NUMBERS: 00000000000000000000000000000001 ()"];
	562 -> 564;
	565 [label="BINARY_OPERATION: bAND"];
	528 -> 565;
	566 [label="IDENTIFIERS: sig_illegal"];
	565 -> 566;
	567 [label="UNARY_OPERATION: bNOT"];
	565 -> 567;
	568 [label="ARRAY_REF"];
	567 -> 568;
	569 [label="IDENTIFIERS: du_dsr"];
	568 -> 569;
	570 [label="NUMBERS: 00000000000000000000000000000110 ()"];
	568 -> 570;
	571 [label="BINARY_OPERATION: bAND"];
	528 -> 571;
	572 [label="IDENTIFIERS: sig_align"];
	571 -> 572;
	573 [label="UNARY_OPERATION: bNOT"];
	571 -> 573;
	574 [label="ARRAY_REF"];
	573 -> 574;
	575 [label="IDENTIFIERS: du_dsr"];
	574 -> 575;
	576 [label="NUMBERS: 00000000000000000000000000000101 ()"];
	574 -> 576;
	577 [label="BINARY_OPERATION: bAND"];
	528 -> 577;
	578 [label="IDENTIFIERS: sig_dtlbmiss"];
	577 -> 578;
	579 [label="UNARY_OPERATION: bNOT"];
	577 -> 579;
	580 [label="ARRAY_REF"];
	579 -> 580;
	581 [label="IDENTIFIERS: du_dsr"];
	580 -> 581;
	582 [label="NUMBERS: 00000000000000000000000000001000 ()"];
	580 -> 582;
	583 [label="BINARY_OPERATION: bAND"];
	528 -> 583;
	584 [label="IDENTIFIERS: sig_dmmufault"];
	583 -> 584;
	585 [label="UNARY_OPERATION: bNOT"];
	583 -> 585;
	586 [label="ARRAY_REF"];
	585 -> 586;
	587 [label="IDENTIFIERS: du_dsr"];
	586 -> 587;
	588 [label="NUMBERS: 00000000000000000000000000000010 ()"];
	586 -> 588;
	589 [label="BINARY_OPERATION: bAND"];
	528 -> 589;
	590 [label="IDENTIFIERS: sig_dbuserr"];
	589 -> 590;
	591 [label="UNARY_OPERATION: bNOT"];
	589 -> 591;
	592 [label="ARRAY_REF"];
	591 -> 592;
	593 [label="IDENTIFIERS: du_dsr"];
	592 -> 593;
	594 [label="NUMBERS: 00000000000000000000000000000001 ()"];
	592 -> 594;
	595 [label="BINARY_OPERATION: bAND"];
	528 -> 595;
	596 [label="IDENTIFIERS: sig_range"];
	595 -> 596;
	597 [label="UNARY_OPERATION: bNOT"];
	595 -> 597;
	598 [label="ARRAY_REF"];
	597 -> 598;
	599 [label="IDENTIFIERS: du_dsr"];
	598 -> 599;
	600 [label="NUMBERS: 00000000000000000000000000001010 ()"];
	598 -> 600;
	601 [label="BINARY_OPERATION: bAND"];
	528 -> 601;
	602 [label="BINARY_OPERATION: bAND"];
	601 -> 602;
	603 [label="IDENTIFIERS: sig_trap"];
	602 -> 603;
	604 [label="UNARY_OPERATION: bNOT"];
	602 -> 604;
	605 [label="ARRAY_REF"];
	604 -> 605;
	606 [label="IDENTIFIERS: du_dsr"];
	605 -> 606;
	607 [label="NUMBERS: 00000000000000000000000000001101 ()"];
	605 -> 607;
	608 [label="UNARY_OPERATION: bNOT"];
	601 -> 608;
	609 [label="IDENTIFIERS: ex_freeze"];
	608 -> 609;
	610 [label="BINARY_OPERATION: bAND"];
	528 -> 610;
	611 [label="BINARY_OPERATION: bAND"];
	610 -> 611;
	612 [label="IDENTIFIERS: sig_syscall"];
	611 -> 612;
	613 [label="UNARY_OPERATION: bNOT"];
	611 -> 613;
	614 [label="ARRAY_REF"];
	613 -> 614;
	615 [label="IDENTIFIERS: du_dsr"];
	614 -> 615;
	616 [label="NUMBERS: 00000000000000000000000000001011 ()"];
	614 -> 616;
	617 [label="UNARY_OPERATION: bNOT"];
	610 -> 617;
	618 [label="IDENTIFIERS: ex_freeze"];
	617 -> 618;
	619 [label="ASSIGN"];
	145 -> 619;
	620 [label="BLOCKING_STATEMENT"];
	619 -> 620;
	621 [label="IDENTIFIERS: except_stop"];
	620 -> 621;
	622 [label="CONCATENATE"];
	620 -> 622;
	623 [label="BINARY_OPERATION: bAND"];
	622 -> 623;
	624 [label="IDENTIFIERS: tick_pending"];
	623 -> 624;
	625 [label="ARRAY_REF"];
	623 -> 625;
	626 [label="IDENTIFIERS: du_dsr"];
	625 -> 626;
	627 [label="NUMBERS: 00000000000000000000000000000100 ()"];
	625 -> 627;
	628 [label="BINARY_OPERATION: bAND"];
	622 -> 628;
	629 [label="IDENTIFIERS: int_pending"];
	628 -> 629;
	630 [label="ARRAY_REF"];
	628 -> 630;
	631 [label="IDENTIFIERS: du_dsr"];
	630 -> 631;
	632 [label="NUMBERS: 00000000000000000000000000000111 ()"];
	630 -> 632;
	633 [label="BINARY_OPERATION: bAND"];
	622 -> 633;
	634 [label="ARRAY_REF"];
	633 -> 634;
	635 [label="IDENTIFIERS: ex_exceptflags"];
	634 -> 635;
	636 [label="NUMBERS: 00000000000000000000000000000001 ()"];
	634 -> 636;
	637 [label="ARRAY_REF"];
	633 -> 637;
	638 [label="IDENTIFIERS: du_dsr"];
	637 -> 638;
	639 [label="NUMBERS: 00000000000000000000000000001001 ()"];
	637 -> 639;
	640 [label="BINARY_OPERATION: bAND"];
	622 -> 640;
	641 [label="ARRAY_REF"];
	640 -> 641;
	642 [label="IDENTIFIERS: ex_exceptflags"];
	641 -> 642;
	643 [label="NUMBERS: 00000000000000000000000000000000 ()"];
	641 -> 643;
	644 [label="ARRAY_REF"];
	640 -> 644;
	645 [label="IDENTIFIERS: du_dsr"];
	644 -> 645;
	646 [label="NUMBERS: 00000000000000000000000000000011 ()"];
	644 -> 646;
	647 [label="BINARY_OPERATION: bAND"];
	622 -> 647;
	648 [label="ARRAY_REF"];
	647 -> 648;
	649 [label="IDENTIFIERS: ex_exceptflags"];
	648 -> 649;
	650 [label="NUMBERS: 00000000000000000000000000000010 ()"];
	648 -> 650;
	651 [label="ARRAY_REF"];
	647 -> 651;
	652 [label="IDENTIFIERS: du_dsr"];
	651 -> 652;
	653 [label="NUMBERS: 00000000000000000000000000000001 ()"];
	651 -> 653;
	654 [label="BINARY_OPERATION: bAND"];
	622 -> 654;
	655 [label="IDENTIFIERS: sig_illegal"];
	654 -> 655;
	656 [label="ARRAY_REF"];
	654 -> 656;
	657 [label="IDENTIFIERS: du_dsr"];
	656 -> 657;
	658 [label="NUMBERS: 00000000000000000000000000000110 ()"];
	656 -> 658;
	659 [label="BINARY_OPERATION: bAND"];
	622 -> 659;
	660 [label="IDENTIFIERS: sig_align"];
	659 -> 660;
	661 [label="ARRAY_REF"];
	659 -> 661;
	662 [label="IDENTIFIERS: du_dsr"];
	661 -> 662;
	663 [label="NUMBERS: 00000000000000000000000000000101 ()"];
	661 -> 663;
	664 [label="BINARY_OPERATION: bAND"];
	622 -> 664;
	665 [label="IDENTIFIERS: sig_dtlbmiss"];
	664 -> 665;
	666 [label="ARRAY_REF"];
	664 -> 666;
	667 [label="IDENTIFIERS: du_dsr"];
	666 -> 667;
	668 [label="NUMBERS: 00000000000000000000000000001000 ()"];
	666 -> 668;
	669 [label="BINARY_OPERATION: bAND"];
	622 -> 669;
	670 [label="IDENTIFIERS: sig_dmmufault"];
	669 -> 670;
	671 [label="ARRAY_REF"];
	669 -> 671;
	672 [label="IDENTIFIERS: du_dsr"];
	671 -> 672;
	673 [label="NUMBERS: 00000000000000000000000000000010 ()"];
	671 -> 673;
	674 [label="BINARY_OPERATION: bAND"];
	622 -> 674;
	675 [label="IDENTIFIERS: sig_dbuserr"];
	674 -> 675;
	676 [label="ARRAY_REF"];
	674 -> 676;
	677 [label="IDENTIFIERS: du_dsr"];
	676 -> 677;
	678 [label="NUMBERS: 00000000000000000000000000000001 ()"];
	676 -> 678;
	679 [label="BINARY_OPERATION: bAND"];
	622 -> 679;
	680 [label="IDENTIFIERS: sig_range"];
	679 -> 680;
	681 [label="ARRAY_REF"];
	679 -> 681;
	682 [label="IDENTIFIERS: du_dsr"];
	681 -> 682;
	683 [label="NUMBERS: 00000000000000000000000000001010 ()"];
	681 -> 683;
	684 [label="BINARY_OPERATION: bAND"];
	622 -> 684;
	685 [label="BINARY_OPERATION: bAND"];
	684 -> 685;
	686 [label="IDENTIFIERS: sig_trap"];
	685 -> 686;
	687 [label="ARRAY_REF"];
	685 -> 687;
	688 [label="IDENTIFIERS: du_dsr"];
	687 -> 688;
	689 [label="NUMBERS: 00000000000000000000000000001101 ()"];
	687 -> 689;
	690 [label="UNARY_OPERATION: bNOT"];
	684 -> 690;
	691 [label="IDENTIFIERS: ex_freeze"];
	690 -> 691;
	692 [label="BINARY_OPERATION: bAND"];
	622 -> 692;
	693 [label="BINARY_OPERATION: bAND"];
	692 -> 693;
	694 [label="IDENTIFIERS: sig_syscall"];
	693 -> 694;
	695 [label="ARRAY_REF"];
	693 -> 695;
	696 [label="IDENTIFIERS: du_dsr"];
	695 -> 696;
	697 [label="NUMBERS: 00000000000000000000000000001011 ()"];
	695 -> 697;
	698 [label="UNARY_OPERATION: bNOT"];
	692 -> 698;
	699 [label="IDENTIFIERS: ex_freeze"];
	698 -> 699;
	700 [label="ALWAYS"];
	145 -> 700;
	701 [label="DELAY_CONTROL"];
	700 -> 701;
	702 [label="POSEDGE"];
	701 -> 702;
	703 [label="IDENTIFIERS: clk"];
	702 -> 703;
	704 [label="BLOCK"];
	700 -> 704;
	705 [label="IF"];
	704 -> 705;
	706 [label="IDENTIFIERS: rst"];
	705 -> 706;
	707 [label="BLOCK"];
	705 -> 707;
	708 [label="NON_BLOCKING_STATEMENT"];
	707 -> 708;
	709 [label="IDENTIFIERS: id_pc"];
	708 -> 709;
	710 [label="NUMBERS: 00000000000000000000000000000000 ()"];
	708 -> 710;
	711 [label="NON_BLOCKING_STATEMENT"];
	707 -> 711;
	712 [label="IDENTIFIERS: id_exceptflags"];
	711 -> 712;
	713 [label="NUMBERS: 000 ()"];
	711 -> 713;
	714 [label="IF"];
	705 -> 714;
	715 [label="IDENTIFIERS: flushpipe"];
	714 -> 715;
	716 [label="BLOCK"];
	714 -> 716;
	717 [label="NON_BLOCKING_STATEMENT"];
	716 -> 717;
	718 [label="IDENTIFIERS: id_pc"];
	717 -> 718;
	719 [label="NUMBERS: 00000000000000000000000000000000 ()"];
	717 -> 719;
	720 [label="NON_BLOCKING_STATEMENT"];
	716 -> 720;
	721 [label="IDENTIFIERS: id_exceptflags"];
	720 -> 721;
	722 [label="NUMBERS: 000 ()"];
	720 -> 722;
	723 [label="IF"];
	714 -> 723;
	724 [label="UNARY_OPERATION: lNOT"];
	723 -> 724;
	725 [label="IDENTIFIERS: id_freeze"];
	724 -> 725;
	726 [label="BLOCK"];
	723 -> 726;
	727 [label="NON_BLOCKING_STATEMENT"];
	726 -> 727;
	728 [label="IDENTIFIERS: id_pc"];
	727 -> 728;
	729 [label="IDENTIFIERS: if_pc"];
	727 -> 729;
	730 [label="NON_BLOCKING_STATEMENT"];
	726 -> 730;
	731 [label="IDENTIFIERS: id_exceptflags"];
	730 -> 731;
	732 [label="CONCATENATE"];
	730 -> 732;
	733 [label="IDENTIFIERS: sig_ibuserr"];
	732 -> 733;
	734 [label="IDENTIFIERS: sig_itlbmiss"];
	732 -> 734;
	735 [label="IDENTIFIERS: sig_immufault"];
	732 -> 735;
	736 [label="ALWAYS"];
	145 -> 736;
	737 [label="DELAY_CONTROL"];
	736 -> 737;
	738 [label="POSEDGE"];
	737 -> 738;
	739 [label="IDENTIFIERS: clk"];
	738 -> 739;
	740 [label="IF"];
	736 -> 740;
	741 [label="IDENTIFIERS: rst"];
	740 -> 741;
	742 [label="NON_BLOCKING_STATEMENT"];
	740 -> 742;
	743 [label="IDENTIFIERS: delayed_iee"];
	742 -> 743;
	744 [label="NUMBERS: 000 ()"];
	742 -> 744;
	745 [label="IF"];
	740 -> 745;
	746 [label="UNARY_OPERATION: lNOT"];
	745 -> 746;
	747 [label="ARRAY_REF"];
	746 -> 747;
	748 [label="IDENTIFIERS: sr"];
	747 -> 748;
	749 [label="NUMBERS: 00000000000000000000000000000010 ()"];
	747 -> 749;
	750 [label="NON_BLOCKING_STATEMENT"];
	745 -> 750;
	751 [label="IDENTIFIERS: delayed_iee"];
	750 -> 751;
	752 [label="NUMBERS: 000 ()"];
	750 -> 752;
	753 [label="NON_BLOCKING_STATEMENT"];
	745 -> 753;
	754 [label="IDENTIFIERS: delayed_iee"];
	753 -> 754;
	755 [label="CONCATENATE"];
	753 -> 755;
	756 [label="RANGE_REF"];
	755 -> 756;
	757 [label="IDENTIFIERS: delayed_iee"];
	756 -> 757;
	758 [label="NUMBERS: 00000000000000000000000000000001 ()"];
	756 -> 758;
	759 [label="NUMBERS: 00000000000000000000000000000000 ()"];
	756 -> 759;
	760 [label="NUMBERS: 1 ()"];
	755 -> 760;
	761 [label="ALWAYS"];
	145 -> 761;
	762 [label="DELAY_CONTROL"];
	761 -> 762;
	763 [label="POSEDGE"];
	762 -> 763;
	764 [label="IDENTIFIERS: clk"];
	763 -> 764;
	765 [label="IF"];
	761 -> 765;
	766 [label="IDENTIFIERS: rst"];
	765 -> 766;
	767 [label="NON_BLOCKING_STATEMENT"];
	765 -> 767;
	768 [label="IDENTIFIERS: delayed_tee"];
	767 -> 768;
	769 [label="NUMBERS: 000 ()"];
	767 -> 769;
	770 [label="IF"];
	765 -> 770;
	771 [label="UNARY_OPERATION: lNOT"];
	770 -> 771;
	772 [label="ARRAY_REF"];
	771 -> 772;
	773 [label="IDENTIFIERS: sr"];
	772 -> 773;
	774 [label="NUMBERS: 00000000000000000000000000000001 ()"];
	772 -> 774;
	775 [label="NON_BLOCKING_STATEMENT"];
	770 -> 775;
	776 [label="IDENTIFIERS: delayed_tee"];
	775 -> 776;
	777 [label="NUMBERS: 000 ()"];
	775 -> 777;
	778 [label="NON_BLOCKING_STATEMENT"];
	770 -> 778;
	779 [label="IDENTIFIERS: delayed_tee"];
	778 -> 779;
	780 [label="CONCATENATE"];
	778 -> 780;
	781 [label="RANGE_REF"];
	780 -> 781;
	782 [label="IDENTIFIERS: delayed_tee"];
	781 -> 782;
	783 [label="NUMBERS: 00000000000000000000000000000001 ()"];
	781 -> 783;
	784 [label="NUMBERS: 00000000000000000000000000000000 ()"];
	781 -> 784;
	785 [label="NUMBERS: 1 ()"];
	780 -> 785;
	786 [label="ALWAYS"];
	145 -> 786;
	787 [label="DELAY_CONTROL"];
	786 -> 787;
	788 [label="POSEDGE"];
	787 -> 788;
	789 [label="IDENTIFIERS: clk"];
	788 -> 789;
	790 [label="BLOCK"];
	786 -> 790;
	791 [label="IF"];
	790 -> 791;
	792 [label="IDENTIFIERS: rst"];
	791 -> 792;
	793 [label="BLOCK"];
	791 -> 793;
	794 [label="NON_BLOCKING_STATEMENT"];
	793 -> 794;
	795 [label="IDENTIFIERS: ex_dslot"];
	794 -> 795;
	796 [label="NUMBERS: 0 ()"];
	794 -> 796;
	797 [label="NON_BLOCKING_STATEMENT"];
	793 -> 797;
	798 [label="IDENTIFIERS: ex_pc"];
	797 -> 798;
	799 [label="NUMBERS: 00000000000000000000000000000000 ()"];
	797 -> 799;
	800 [label="NON_BLOCKING_STATEMENT"];
	793 -> 800;
	801 [label="IDENTIFIERS: ex_exceptflags"];
	800 -> 801;
	802 [label="NUMBERS: 000 ()"];
	800 -> 802;
	803 [label="NON_BLOCKING_STATEMENT"];
	793 -> 803;
	804 [label="IDENTIFIERS: delayed1_ex_dslot"];
	803 -> 804;
	805 [label="NUMBERS: 0 ()"];
	803 -> 805;
	806 [label="NON_BLOCKING_STATEMENT"];
	793 -> 806;
	807 [label="IDENTIFIERS: delayed2_ex_dslot"];
	806 -> 807;
	808 [label="NUMBERS: 0 ()"];
	806 -> 808;
	809 [label="IF"];
	791 -> 809;
	810 [label="IDENTIFIERS: flushpipe"];
	809 -> 810;
	811 [label="BLOCK"];
	809 -> 811;
	812 [label="NON_BLOCKING_STATEMENT"];
	811 -> 812;
	813 [label="IDENTIFIERS: ex_dslot"];
	812 -> 813;
	814 [label="NUMBERS: 0 ()"];
	812 -> 814;
	815 [label="NON_BLOCKING_STATEMENT"];
	811 -> 815;
	816 [label="IDENTIFIERS: ex_pc"];
	815 -> 816;
	817 [label="NUMBERS: 00000000000000000000000000000000 ()"];
	815 -> 817;
	818 [label="NON_BLOCKING_STATEMENT"];
	811 -> 818;
	819 [label="IDENTIFIERS: ex_exceptflags"];
	818 -> 819;
	820 [label="NUMBERS: 000 ()"];
	818 -> 820;
	821 [label="NON_BLOCKING_STATEMENT"];
	811 -> 821;
	822 [label="IDENTIFIERS: delayed1_ex_dslot"];
	821 -> 822;
	823 [label="NUMBERS: 0 ()"];
	821 -> 823;
	824 [label="NON_BLOCKING_STATEMENT"];
	811 -> 824;
	825 [label="IDENTIFIERS: delayed2_ex_dslot"];
	824 -> 825;
	826 [label="NUMBERS: 0 ()"];
	824 -> 826;
	827 [label="IF"];
	809 -> 827;
	828 [label="BINARY_OPERATION: bAND"];
	827 -> 828;
	829 [label="UNARY_OPERATION: lNOT"];
	828 -> 829;
	830 [label="IDENTIFIERS: ex_freeze"];
	829 -> 830;
	831 [label="IDENTIFIERS: id_freeze"];
	828 -> 831;
	832 [label="BLOCK"];
	827 -> 832;
	833 [label="NON_BLOCKING_STATEMENT"];
	832 -> 833;
	834 [label="IDENTIFIERS: ex_dslot"];
	833 -> 834;
	835 [label="NUMBERS: 0 ()"];
	833 -> 835;
	836 [label="NON_BLOCKING_STATEMENT"];
	832 -> 836;
	837 [label="IDENTIFIERS: ex_pc"];
	836 -> 837;
	838 [label="IDENTIFIERS: id_pc"];
	836 -> 838;
	839 [label="NON_BLOCKING_STATEMENT"];
	832 -> 839;
	840 [label="IDENTIFIERS: ex_exceptflags"];
	839 -> 840;
	841 [label="NUMBERS: 000 ()"];
	839 -> 841;
	842 [label="NON_BLOCKING_STATEMENT"];
	832 -> 842;
	843 [label="IDENTIFIERS: delayed1_ex_dslot"];
	842 -> 843;
	844 [label="IDENTIFIERS: ex_dslot"];
	842 -> 844;
	845 [label="NON_BLOCKING_STATEMENT"];
	832 -> 845;
	846 [label="IDENTIFIERS: delayed2_ex_dslot"];
	845 -> 846;
	847 [label="IDENTIFIERS: delayed1_ex_dslot"];
	845 -> 847;
	848 [label="IF"];
	827 -> 848;
	849 [label="UNARY_OPERATION: lNOT"];
	848 -> 849;
	850 [label="IDENTIFIERS: ex_freeze"];
	849 -> 850;
	851 [label="BLOCK"];
	848 -> 851;
	852 [label="NON_BLOCKING_STATEMENT"];
	851 -> 852;
	853 [label="IDENTIFIERS: ex_dslot"];
	852 -> 853;
	854 [label="IDENTIFIERS: branch_taken"];
	852 -> 854;
	855 [label="NON_BLOCKING_STATEMENT"];
	851 -> 855;
	856 [label="IDENTIFIERS: ex_pc"];
	855 -> 856;
	857 [label="IDENTIFIERS: id_pc"];
	855 -> 857;
	858 [label="NON_BLOCKING_STATEMENT"];
	851 -> 858;
	859 [label="IDENTIFIERS: ex_exceptflags"];
	858 -> 859;
	860 [label="IDENTIFIERS: id_exceptflags"];
	858 -> 860;
	861 [label="NON_BLOCKING_STATEMENT"];
	851 -> 861;
	862 [label="IDENTIFIERS: delayed1_ex_dslot"];
	861 -> 862;
	863 [label="IDENTIFIERS: ex_dslot"];
	861 -> 863;
	864 [label="NON_BLOCKING_STATEMENT"];
	851 -> 864;
	865 [label="IDENTIFIERS: delayed2_ex_dslot"];
	864 -> 865;
	866 [label="IDENTIFIERS: delayed1_ex_dslot"];
	864 -> 866;
	867 [label="ALWAYS"];
	145 -> 867;
	868 [label="DELAY_CONTROL"];
	867 -> 868;
	869 [label="POSEDGE"];
	868 -> 869;
	870 [label="IDENTIFIERS: clk"];
	869 -> 870;
	871 [label="BLOCK"];
	867 -> 871;
	872 [label="IF"];
	871 -> 872;
	873 [label="IDENTIFIERS: rst"];
	872 -> 873;
	874 [label="BLOCK"];
	872 -> 874;
	875 [label="NON_BLOCKING_STATEMENT"];
	874 -> 875;
	876 [label="IDENTIFIERS: wb_pc"];
	875 -> 876;
	877 [label="NUMBERS: 00000000000000000000000000000000 ()"];
	875 -> 877;
	878 [label="IF"];
	872 -> 878;
	879 [label="UNARY_OPERATION: lNOT"];
	878 -> 879;
	880 [label="IDENTIFIERS: wb_freeze"];
	879 -> 880;
	881 [label="BLOCK"];
	878 -> 881;
	882 [label="NON_BLOCKING_STATEMENT"];
	881 -> 882;
	883 [label="IDENTIFIERS: wb_pc"];
	882 -> 883;
	884 [label="IDENTIFIERS: ex_pc"];
	882 -> 884;
	885 [label="ASSIGN"];
	145 -> 885;
	886 [label="BLOCKING_STATEMENT"];
	885 -> 886;
	887 [label="IDENTIFIERS: flushpipe"];
	886 -> 887;
	888 [label="BINARY_OPERATION: bOR"];
	886 -> 888;
	889 [label="BINARY_OPERATION: bOR"];
	888 -> 889;
	890 [label="IDENTIFIERS: except_flushpipe"];
	889 -> 890;
	891 [label="IDENTIFIERS: pc_we"];
	889 -> 891;
	892 [label="IDENTIFIERS: extend_flush"];
	888 -> 892;
	893 [label="ASSIGN"];
	145 -> 893;
	894 [label="BLOCKING_STATEMENT"];
	893 -> 894;
	895 [label="IDENTIFIERS: except_flushpipe"];
	894 -> 895;
	896 [label="BINARY_OPERATION: bAND"];
	894 -> 896;
	897 [label="UNARY_OPERATION: bOR"];
	896 -> 897;
	898 [label="IDENTIFIERS: except_trig"];
	897 -> 898;
	899 [label="UNARY_OPERATION: bNOR"];
	896 -> 899;
	900 [label="IDENTIFIERS: state"];
	899 -> 900;
	901 [label="ALWAYS"];
	145 -> 901;
	902 [label="DELAY_CONTROL"];
	901 -> 902;
	903 [label="POSEDGE"];
	902 -> 903;
	904 [label="IDENTIFIERS: clk"];
	903 -> 904;
	905 [label="BLOCK"];
	901 -> 905;
	906 [label="IF"];
	905 -> 906;
	907 [label="IDENTIFIERS: rst"];
	906 -> 907;
	908 [label="BLOCK"];
	906 -> 908;
	909 [label="NON_BLOCKING_STATEMENT"];
	908 -> 909;
	910 [label="IDENTIFIERS: state"];
	909 -> 910;
	911 [label="NUMBERS: 000 ()"];
	909 -> 911;
	912 [label="NON_BLOCKING_STATEMENT"];
	908 -> 912;
	913 [label="IDENTIFIERS: except_type"];
	912 -> 913;
	914 [label="NUMBERS: 0000 ()"];
	912 -> 914;
	915 [label="NON_BLOCKING_STATEMENT"];
	908 -> 915;
	916 [label="IDENTIFIERS: extend_flush"];
	915 -> 916;
	917 [label="NUMBERS: 0 ()"];
	915 -> 917;
	918 [label="NON_BLOCKING_STATEMENT"];
	908 -> 918;
	919 [label="IDENTIFIERS: epcr"];
	918 -> 919;
	920 [label="NUMBERS: 00000000000000000000000000000000 ()"];
	918 -> 920;
	921 [label="NON_BLOCKING_STATEMENT"];
	908 -> 921;
	922 [label="IDENTIFIERS: eear"];
	921 -> 922;
	923 [label="NUMBERS: 00000000000000000000000000000000 ()"];
	921 -> 923;
	924 [label="NON_BLOCKING_STATEMENT"];
	908 -> 924;
	925 [label="IDENTIFIERS: esr"];
	924 -> 925;
	926 [label="CONCATENATE"];
	924 -> 926;
	927 [label="CONCATENATE"];
	926 -> 927;
	928 [label="NUMBERS: 1 ()"];
	927 -> 928;
	929 [label="NUMBERS: 0 ()"];
	927 -> 929;
	930 [label="CONCATENATE"];
	926 -> 930;
	931 [label="NUMBERS: 0 ()"];
	930 -> 931;
	932 [label="CONCATENATE"];
	926 -> 932;
	933 [label="NUMBERS: 0 ()"];
	932 -> 933;
	934 [label="CONCATENATE"];
	926 -> 934;
	935 [label="NUMBERS: 0 ()"];
	934 -> 935;
	936 [label="CONCATENATE"];
	926 -> 936;
	937 [label="NUMBERS: 0 ()"];
	936 -> 937;
	938 [label="CONCATENATE"];
	926 -> 938;
	939 [label="NUMBERS: 0 ()"];
	938 -> 939;
	940 [label="CONCATENATE"];
	926 -> 940;
	941 [label="NUMBERS: 0 ()"];
	940 -> 941;
	942 [label="CONCATENATE"];
	926 -> 942;
	943 [label="NUMBERS: 0 ()"];
	942 -> 943;
	944 [label="CONCATENATE"];
	926 -> 944;
	945 [label="NUMBERS: 0 ()"];
	944 -> 945;
	946 [label="CONCATENATE"];
	926 -> 946;
	947 [label="NUMBERS: 0 ()"];
	946 -> 947;
	948 [label="CONCATENATE"];
	926 -> 948;
	949 [label="NUMBERS: 0 ()"];
	948 -> 949;
	950 [label="CONCATENATE"];
	926 -> 950;
	951 [label="NUMBERS: 0 ()"];
	950 -> 951;
	952 [label="CONCATENATE"];
	926 -> 952;
	953 [label="NUMBERS: 0 ()"];
	952 -> 953;
	954 [label="CONCATENATE"];
	926 -> 954;
	955 [label="NUMBERS: 0 ()"];
	954 -> 955;
	956 [label="CONCATENATE"];
	926 -> 956;
	957 [label="NUMBERS: 0 ()"];
	956 -> 957;
	958 [label="CONCATENATE"];
	926 -> 958;
	959 [label="NUMBERS: 0 ()"];
	958 -> 959;
	960 [label="CONCATENATE"];
	926 -> 960;
	961 [label="NUMBERS: 0 ()"];
	960 -> 961;
	962 [label="CONCATENATE"];
	926 -> 962;
	963 [label="NUMBERS: 0 ()"];
	962 -> 963;
	964 [label="CONCATENATE"];
	926 -> 964;
	965 [label="NUMBERS: 0 ()"];
	964 -> 965;
	966 [label="CONCATENATE"];
	926 -> 966;
	967 [label="NUMBERS: 0 ()"];
	966 -> 967;
	968 [label="CONCATENATE"];
	926 -> 968;
	969 [label="NUMBERS: 0 ()"];
	968 -> 969;
	970 [label="CONCATENATE"];
	926 -> 970;
	971 [label="NUMBERS: 0 ()"];
	970 -> 971;
	972 [label="CONCATENATE"];
	926 -> 972;
	973 [label="NUMBERS: 0 ()"];
	972 -> 973;
	974 [label="CONCATENATE"];
	926 -> 974;
	975 [label="NUMBERS: 0 ()"];
	974 -> 975;
	976 [label="CONCATENATE"];
	926 -> 976;
	977 [label="NUMBERS: 0 ()"];
	976 -> 977;
	978 [label="CONCATENATE"];
	926 -> 978;
	979 [label="NUMBERS: 0 ()"];
	978 -> 979;
	980 [label="CONCATENATE"];
	926 -> 980;
	981 [label="NUMBERS: 0 ()"];
	980 -> 981;
	982 [label="CONCATENATE"];
	926 -> 982;
	983 [label="NUMBERS: 0 ()"];
	982 -> 983;
	984 [label="CONCATENATE"];
	926 -> 984;
	985 [label="NUMBERS: 0 ()"];
	984 -> 985;
	986 [label="CONCATENATE"];
	926 -> 986;
	987 [label="NUMBERS: 0 ()"];
	986 -> 987;
	988 [label="CONCATENATE"];
	926 -> 988;
	989 [label="NUMBERS: 1 ()"];
	988 -> 989;
	990 [label="NON_BLOCKING_STATEMENT"];
	908 -> 990;
	991 [label="IDENTIFIERS: extend_flush_last"];
	990 -> 991;
	992 [label="NUMBERS: 0 ()"];
	990 -> 992;
	993 [label="BLOCK"];
	906 -> 993;
	994 [label="CASE"];
	993 -> 994;
	995 [label="IDENTIFIERS: state"];
	994 -> 995;
	996 [label="CASE_LIST"];
	994 -> 996;
	997 [label="CASE_ITEM"];
	996 -> 997;
	998 [label="NUMBERS: 000 ()"];
	997 -> 998;
	999 [label="IF"];
	997 -> 999;
	1000 [label="IDENTIFIERS: except_flushpipe"];
	999 -> 1000;
	1001 [label="BLOCK"];
	999 -> 1001;
	1002 [label="NON_BLOCKING_STATEMENT"];
	1001 -> 1002;
	1003 [label="IDENTIFIERS: state"];
	1002 -> 1003;
	1004 [label="NUMBERS: 001 ()"];
	1002 -> 1004;
	1005 [label="NON_BLOCKING_STATEMENT"];
	1001 -> 1005;
	1006 [label="IDENTIFIERS: extend_flush"];
	1005 -> 1006;
	1007 [label="NUMBERS: 1 ()"];
	1005 -> 1007;
	1008 [label="NON_BLOCKING_STATEMENT"];
	1001 -> 1008;
	1009 [label="IDENTIFIERS: esr"];
	1008 -> 1009;
	1010 [label="IF_Q"];
	1008 -> 1010;
	1011 [label="IDENTIFIERS: sr_we"];
	1010 -> 1011;
	1012 [label="IDENTIFIERS: to_sr"];
	1010 -> 1012;
	1013 [label="IDENTIFIERS: sr"];
	1010 -> 1013;
	1014 [label="IF"];
	1001 -> 1014;
	1015 [label="BINARY_OPERATION: lEQ"];
	1014 -> 1015;
	1016 [label="ARRAY_REF"];
	1015 -> 1016;
	1017 [label="IDENTIFIERS: except_trig"];
	1016 -> 1017;
	1018 [label="NUMBERS: 00000000000000000000000000001100 ()"];
	1016 -> 1018;
	1019 [label="NUMBERS: 00000000000000000000000000000001 ()"];
	1015 -> 1019;
	1020 [label="BLOCK"];
	1014 -> 1020;
	1021 [label="NON_BLOCKING_STATEMENT"];
	1020 -> 1021;
	1022 [label="IDENTIFIERS: except_type"];
	1021 -> 1022;
	1023 [label="NUMBERS: 101 ()"];
	1021 -> 1023;
	1024 [label="NON_BLOCKING_STATEMENT"];
	1020 -> 1024;
	1025 [label="IDENTIFIERS: epcr"];
	1024 -> 1025;
	1026 [label="IF_Q"];
	1024 -> 1026;
	1027 [label="IDENTIFIERS: ex_dslot"];
	1026 -> 1027;
	1028 [label="IDENTIFIERS: wb_pc"];
	1026 -> 1028;
	1029 [label="IF_Q"];
	1026 -> 1029;
	1030 [label="IDENTIFIERS: delayed1_ex_dslot"];
	1029 -> 1030;
	1031 [label="IDENTIFIERS: id_pc"];
	1029 -> 1031;
	1032 [label="IF_Q"];
	1029 -> 1032;
	1033 [label="IDENTIFIERS: delayed2_ex_dslot"];
	1032 -> 1033;
	1034 [label="IDENTIFIERS: id_pc"];
	1032 -> 1034;
	1035 [label="IDENTIFIERS: id_pc"];
	1032 -> 1035;
	1036 [label="IF"];
	1014 -> 1036;
	1037 [label="BINARY_OPERATION: lAND"];
	1036 -> 1037;
	1038 [label="BINARY_OPERATION: lEQ"];
	1037 -> 1038;
	1039 [label="ARRAY_REF"];
	1038 -> 1039;
	1040 [label="IDENTIFIERS: except_trig"];
	1039 -> 1040;
	1041 [label="NUMBERS: 00000000000000000000000000001100 ()"];
	1039 -> 1041;
	1042 [label="NUMBERS: 00000000000000000000000000000000 ()"];
	1038 -> 1042;
	1043 [label="BINARY_OPERATION: lEQ"];
	1037 -> 1043;
	1044 [label="ARRAY_REF"];
	1043 -> 1044;
	1045 [label="IDENTIFIERS: except_trig"];
	1044 -> 1045;
	1046 [label="NUMBERS: 00000000000000000000000000001011 ()"];
	1044 -> 1046;
	1047 [label="NUMBERS: 00000000000000000000000000000000 ()"];
	1043 -> 1047;
	1048 [label="BLOCK"];
	1036 -> 1048;
	1049 [label="NON_BLOCKING_STATEMENT"];
	1048 -> 1049;
	1050 [label="IDENTIFIERS: except_type"];
	1049 -> 1050;
	1051 [label="NUMBERS: 000 ()"];
	1049 -> 1051;
	1052 [label="NON_BLOCKING_STATEMENT"];
	1048 -> 1052;
	1053 [label="IDENTIFIERS: epcr"];
	1052 -> 1053;
	1054 [label="IF_Q"];
	1052 -> 1054;
	1055 [label="IDENTIFIERS: ex_dslot"];
	1054 -> 1055;
	1056 [label="IDENTIFIERS: wb_pc"];
	1054 -> 1056;
	1057 [label="IF_Q"];
	1054 -> 1057;
	1058 [label="IDENTIFIERS: delayed1_ex_dslot"];
	1057 -> 1058;
	1059 [label="IDENTIFIERS: id_pc"];
	1057 -> 1059;
	1060 [label="IF_Q"];
	1057 -> 1060;
	1061 [label="IDENTIFIERS: delayed2_ex_dslot"];
	1060 -> 1061;
	1062 [label="IDENTIFIERS: id_pc"];
	1060 -> 1062;
	1063 [label="IDENTIFIERS: id_pc"];
	1060 -> 1063;
	1064 [label="IF"];
	1036 -> 1064;
	1065 [label="BINARY_OPERATION: lAND"];
	1064 -> 1065;
	1066 [label="BINARY_OPERATION: lAND"];
	1065 -> 1066;
	1067 [label="BINARY_OPERATION: lEQ"];
	1066 -> 1067;
	1068 [label="ARRAY_REF"];
	1067 -> 1068;
	1069 [label="IDENTIFIERS: except_trig"];
	1068 -> 1069;
	1070 [label="NUMBERS: 00000000000000000000000000001100 ()"];
	1068 -> 1070;
	1071 [label="NUMBERS: 00000000000000000000000000000000 ()"];
	1067 -> 1071;
	1072 [label="BINARY_OPERATION: lEQ"];
	1066 -> 1072;
	1073 [label="ARRAY_REF"];
	1072 -> 1073;
	1074 [label="IDENTIFIERS: except_trig"];
	1073 -> 1074;
	1075 [label="NUMBERS: 00000000000000000000000000001011 ()"];
	1073 -> 1075;
	1076 [label="NUMBERS: 00000000000000000000000000000000 ()"];
	1072 -> 1076;
	1077 [label="BINARY_OPERATION: lEQ"];
	1065 -> 1077;
	1078 [label="ARRAY_REF"];
	1077 -> 1078;
	1079 [label="IDENTIFIERS: except_trig"];
	1078 -> 1079;
	1080 [label="NUMBERS: 00000000000000000000000000001010 ()"];
	1078 -> 1080;
	1081 [label="NUMBERS: 00000000000000000000000000000001 ()"];
	1077 -> 1081;
	1082 [label="BLOCK"];
	1064 -> 1082;
	1083 [label="NON_BLOCKING_STATEMENT"];
	1082 -> 1083;
	1084 [label="IDENTIFIERS: except_type"];
	1083 -> 1084;
	1085 [label="NUMBERS: 010 ()"];
	1083 -> 1085;
	1086 [label="NON_BLOCKING_STATEMENT"];
	1082 -> 1086;
	1087 [label="IDENTIFIERS: eear"];
	1086 -> 1087;
	1088 [label="IF_Q"];
	1086 -> 1088;
	1089 [label="IDENTIFIERS: ex_dslot"];
	1088 -> 1089;
	1090 [label="IDENTIFIERS: ex_pc"];
	1088 -> 1090;
	1091 [label="IDENTIFIERS: ex_pc"];
	1088 -> 1091;
	1092 [label="NON_BLOCKING_STATEMENT"];
	1082 -> 1092;
	1093 [label="IDENTIFIERS: epcr"];
	1092 -> 1093;
	1094 [label="IF_Q"];
	1092 -> 1094;
	1095 [label="IDENTIFIERS: ex_dslot"];
	1094 -> 1095;
	1096 [label="IDENTIFIERS: wb_pc"];
	1094 -> 1096;
	1097 [label="IDENTIFIERS: ex_pc"];
	1094 -> 1097;
	1098 [label="BLOCK"];
	1064 -> 1098;
	1099 [label="NON_BLOCKING_STATEMENT"];
	1098 -> 1099;
	1100 [label="IDENTIFIERS: except_type"];
	1099 -> 1100;
	1101 [label="NUMBERS: 0000 ()"];
	1099 -> 1101;
	1102 [label="IF"];
	999 -> 1102;
	1103 [label="IDENTIFIERS: pc_we"];
	1102 -> 1103;
	1104 [label="BLOCK"];
	1102 -> 1104;
	1105 [label="NON_BLOCKING_STATEMENT"];
	1104 -> 1105;
	1106 [label="IDENTIFIERS: state"];
	1105 -> 1106;
	1107 [label="NUMBERS: 001 ()"];
	1105 -> 1107;
	1108 [label="NON_BLOCKING_STATEMENT"];
	1104 -> 1108;
	1109 [label="IDENTIFIERS: extend_flush"];
	1108 -> 1109;
	1110 [label="NUMBERS: 1 ()"];
	1108 -> 1110;
	1111 [label="BLOCK"];
	1102 -> 1111;
	1112 [label="IF"];
	1111 -> 1112;
	1113 [label="IDENTIFIERS: epcr_we"];
	1112 -> 1113;
	1114 [label="NON_BLOCKING_STATEMENT"];
	1112 -> 1114;
	1115 [label="IDENTIFIERS: epcr"];
	1114 -> 1115;
	1116 [label="IDENTIFIERS: datain"];
	1114 -> 1116;
	1117 [label="IF"];
	1111 -> 1117;
	1118 [label="IDENTIFIERS: eear_we"];
	1117 -> 1118;
	1119 [label="NON_BLOCKING_STATEMENT"];
	1117 -> 1119;
	1120 [label="IDENTIFIERS: eear"];
	1119 -> 1120;
	1121 [label="IDENTIFIERS: datain"];
	1119 -> 1121;
	1122 [label="IF"];
	1111 -> 1122;
	1123 [label="IDENTIFIERS: esr_we"];
	1122 -> 1123;
	1124 [label="NON_BLOCKING_STATEMENT"];
	1122 -> 1124;
	1125 [label="IDENTIFIERS: esr"];
	1124 -> 1125;
	1126 [label="CONCATENATE"];
	1124 -> 1126;
	1127 [label="NUMBERS: 1 ()"];
	1126 -> 1127;
	1128 [label="RANGE_REF"];
	1126 -> 1128;
	1129 [label="IDENTIFIERS: datain"];
	1128 -> 1129;
	1130 [label="BINARY_OPERATION: MIN"];
	1128 -> 1130;
	1131 [label="NUMBERS: 00000000000000000000000000010000 ()"];
	1130 -> 1131;
	1132 [label="NUMBERS: 00000000000000000000000000000010 ()"];
	1130 -> 1132;
	1133 [label="NUMBERS: 00000000000000000000000000000000 ()"];
	1128 -> 1133;
	1134 [label="CASE_ITEM"];
	996 -> 1134;
	1135 [label="NUMBERS: 001 ()"];
	1134 -> 1135;
	1136 [label="IF"];
	1134 -> 1136;
	1137 [label="BINARY_OPERATION: bOR"];
	1136 -> 1137;
	1138 [label="BINARY_OPERATION: bOR"];
	1137 -> 1138;
	1139 [label="IDENTIFIERS: icpu_ack_i"];
	1138 -> 1139;
	1140 [label="IDENTIFIERS: icpu_err_i"];
	1138 -> 1140;
	1141 [label="IDENTIFIERS: genpc_freeze"];
	1137 -> 1141;
	1142 [label="NON_BLOCKING_STATEMENT"];
	1136 -> 1142;
	1143 [label="IDENTIFIERS: state"];
	1142 -> 1143;
	1144 [label="NUMBERS: 010 ()"];
	1142 -> 1144;
	1145 [label="CASE_ITEM"];
	996 -> 1145;
	1146 [label="NUMBERS: 010 ()"];
	1145 -> 1146;
	1147 [label="NON_BLOCKING_STATEMENT"];
	1145 -> 1147;
	1148 [label="IDENTIFIERS: state"];
	1147 -> 1148;
	1149 [label="NUMBERS: 011 ()"];
	1147 -> 1149;
	1150 [label="CASE_ITEM"];
	996 -> 1150;
	1151 [label="NUMBERS: 011 ()"];
	1150 -> 1151;
	1152 [label="BLOCK"];
	1150 -> 1152;
	1153 [label="NON_BLOCKING_STATEMENT"];
	1152 -> 1153;
	1154 [label="IDENTIFIERS: state"];
	1153 -> 1154;
	1155 [label="NUMBERS: 100 ()"];
	1153 -> 1155;
	1156 [label="CASE_ITEM"];
	996 -> 1156;
	1157 [label="NUMBERS: 100 ()"];
	1156 -> 1157;
	1158 [label="BLOCK"];
	1156 -> 1158;
	1159 [label="NON_BLOCKING_STATEMENT"];
	1158 -> 1159;
	1160 [label="IDENTIFIERS: state"];
	1159 -> 1160;
	1161 [label="NUMBERS: 101 ()"];
	1159 -> 1161;
	1162 [label="NON_BLOCKING_STATEMENT"];
	1158 -> 1162;
	1163 [label="IDENTIFIERS: extend_flush"];
	1162 -> 1163;
	1164 [label="NUMBERS: 0 ()"];
	1162 -> 1164;
	1165 [label="NON_BLOCKING_STATEMENT"];
	1158 -> 1165;
	1166 [label="IDENTIFIERS: extend_flush_last"];
	1165 -> 1166;
	1167 [label="NUMBERS: 0 ()"];
	1165 -> 1167;
	1168 [label="CASE_DEFAULT"];
	996 -> 1168;
	1169 [label="BLOCK"];
	1168 -> 1169;
	1170 [label="IF"];
	1169 -> 1170;
	1171 [label="BINARY_OPERATION: lAND"];
	1170 -> 1171;
	1172 [label="UNARY_OPERATION: lNOT"];
	1171 -> 1172;
	1173 [label="IDENTIFIERS: if_stall"];
	1172 -> 1173;
	1174 [label="UNARY_OPERATION: lNOT"];
	1171 -> 1174;
	1175 [label="IDENTIFIERS: id_freeze"];
	1174 -> 1175;
	1176 [label="BLOCK"];
	1170 -> 1176;
	1177 [label="NON_BLOCKING_STATEMENT"];
	1176 -> 1177;
	1178 [label="IDENTIFIERS: state"];
	1177 -> 1178;
	1179 [label="NUMBERS: 000 ()"];
	1177 -> 1179;
	1180 [label="NON_BLOCKING_STATEMENT"];
	1176 -> 1180;
	1181 [label="IDENTIFIERS: except_type"];
	1180 -> 1181;
	1182 [label="NUMBERS: 0000 ()"];
	1180 -> 1182;
	1183 [label="NON_BLOCKING_STATEMENT"];
	1176 -> 1183;
	1184 [label="IDENTIFIERS: extend_flush_last"];
	1183 -> 1184;
	1185 [label="NUMBERS: 0 ()"];
	1183 -> 1185;
	1186 [label="VAR_DECLARE_LIST"];
	145 -> 1186;
	1187 [label="VAR_DECLARE:  WIRE"];
	1186 -> 1187;
	1188 [label="IDENTIFIERS: unused"];
	1187 -> 1188;
	1189 [label="ASSIGN"];
	145 -> 1189;
	1190 [label="BLOCKING_STATEMENT"];
	1189 -> 1190;
	1191 [label="IDENTIFIERS: unused"];
	1190 -> 1191;
	1192 [label="BINARY_OPERATION: bOR"];
	1190 -> 1192;
	1193 [label="BINARY_OPERATION: bOR"];
	1192 -> 1193;
	1194 [label="BINARY_OPERATION: bOR"];
	1193 -> 1194;
	1195 [label="BINARY_OPERATION: bOR"];
	1194 -> 1195;
	1196 [label="BINARY_OPERATION: bOR"];
	1195 -> 1196;
	1197 [label="BINARY_OPERATION: bOR"];
	1196 -> 1197;
	1198 [label="IDENTIFIERS: sig_range"];
	1197 -> 1198;
	1199 [label="IDENTIFIERS: sig_syscall"];
	1197 -> 1199;
	1200 [label="IDENTIFIERS: sig_trap"];
	1196 -> 1200;
	1201 [label="IDENTIFIERS: dcpu_ack_i"];
	1195 -> 1201;
	1202 [label="IDENTIFIERS: dcpu_err_i"];
	1194 -> 1202;
	1203 [label="IDENTIFIERS: du_dsr"];
	1193 -> 1203;
	1204 [label="IDENTIFIERS: lsu_addr"];
	1192 -> 1204;
}

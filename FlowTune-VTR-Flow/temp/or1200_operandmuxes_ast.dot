digraph G {	
ranksep=.25;
	0 [label="MODULE"];
	1 [label="IDENTIFIERS: or1200_operandmuxes"];
	0 -> 1;
	2 [label="VAR_DECLARE_LIST"];
	0 -> 2;
	3 [label="VAR_DECLARE:  INPUT PORT"];
	2 -> 3;
	4 [label="IDENTIFIERS: clk"];
	3 -> 4;
	5 [label="VAR_DECLARE:  INPUT PORT"];
	2 -> 5;
	6 [label="IDENTIFIERS: rst"];
	5 -> 6;
	7 [label="VAR_DECLARE:  INPUT PORT"];
	2 -> 7;
	8 [label="IDENTIFIERS: id_freeze"];
	7 -> 8;
	9 [label="VAR_DECLARE:  INPUT PORT"];
	2 -> 9;
	10 [label="IDENTIFIERS: ex_freeze"];
	9 -> 10;
	11 [label="VAR_DECLARE:  INPUT PORT"];
	2 -> 11;
	12 [label="IDENTIFIERS: rf_dataa"];
	11 -> 12;
	13 [label="BINARY_OPERATION: MIN"];
	11 -> 13;
	14 [label="NUMBERS: 00000000000000000000000000100000 ()"];
	13 -> 14;
	15 [label="NUMBERS: 00000000000000000000000000000001 ()"];
	13 -> 15;
	16 [label="NUMBERS: 00000000000000000000000000000000 ()"];
	11 -> 16;
	17 [label="VAR_DECLARE:  INPUT PORT"];
	2 -> 17;
	18 [label="IDENTIFIERS: rf_datab"];
	17 -> 18;
	19 [label="BINARY_OPERATION: MIN"];
	17 -> 19;
	20 [label="NUMBERS: 00000000000000000000000000100000 ()"];
	19 -> 20;
	21 [label="NUMBERS: 00000000000000000000000000000001 ()"];
	19 -> 21;
	22 [label="NUMBERS: 00000000000000000000000000000000 ()"];
	17 -> 22;
	23 [label="VAR_DECLARE:  INPUT PORT"];
	2 -> 23;
	24 [label="IDENTIFIERS: ex_forw"];
	23 -> 24;
	25 [label="BINARY_OPERATION: MIN"];
	23 -> 25;
	26 [label="NUMBERS: 00000000000000000000000000100000 ()"];
	25 -> 26;
	27 [label="NUMBERS: 00000000000000000000000000000001 ()"];
	25 -> 27;
	28 [label="NUMBERS: 00000000000000000000000000000000 ()"];
	23 -> 28;
	29 [label="VAR_DECLARE:  INPUT PORT"];
	2 -> 29;
	30 [label="IDENTIFIERS: wb_forw"];
	29 -> 30;
	31 [label="BINARY_OPERATION: MIN"];
	29 -> 31;
	32 [label="NUMBERS: 00000000000000000000000000100000 ()"];
	31 -> 32;
	33 [label="NUMBERS: 00000000000000000000000000000001 ()"];
	31 -> 33;
	34 [label="NUMBERS: 00000000000000000000000000000000 ()"];
	29 -> 34;
	35 [label="VAR_DECLARE:  INPUT PORT"];
	2 -> 35;
	36 [label="IDENTIFIERS: simm"];
	35 -> 36;
	37 [label="BINARY_OPERATION: MIN"];
	35 -> 37;
	38 [label="NUMBERS: 00000000000000000000000000100000 ()"];
	37 -> 38;
	39 [label="NUMBERS: 00000000000000000000000000000001 ()"];
	37 -> 39;
	40 [label="NUMBERS: 00000000000000000000000000000000 ()"];
	35 -> 40;
	41 [label="VAR_DECLARE:  INPUT PORT"];
	2 -> 41;
	42 [label="IDENTIFIERS: sel_a"];
	41 -> 42;
	43 [label="BINARY_OPERATION: MIN"];
	41 -> 43;
	44 [label="NUMBERS: 00000000000000000000000000000010 ()"];
	43 -> 44;
	45 [label="NUMBERS: 00000000000000000000000000000001 ()"];
	43 -> 45;
	46 [label="NUMBERS: 00000000000000000000000000000000 ()"];
	41 -> 46;
	47 [label="VAR_DECLARE:  INPUT PORT"];
	2 -> 47;
	48 [label="IDENTIFIERS: sel_b"];
	47 -> 48;
	49 [label="BINARY_OPERATION: MIN"];
	47 -> 49;
	50 [label="NUMBERS: 00000000000000000000000000000010 ()"];
	49 -> 50;
	51 [label="NUMBERS: 00000000000000000000000000000001 ()"];
	49 -> 51;
	52 [label="NUMBERS: 00000000000000000000000000000000 ()"];
	47 -> 52;
	53 [label="VAR_DECLARE:  OUTPUT PORT"];
	2 -> 53;
	54 [label="IDENTIFIERS: operand_a"];
	53 -> 54;
	55 [label="BINARY_OPERATION: MIN"];
	53 -> 55;
	56 [label="NUMBERS: 00000000000000000000000000100000 ()"];
	55 -> 56;
	57 [label="NUMBERS: 00000000000000000000000000000001 ()"];
	55 -> 57;
	58 [label="NUMBERS: 00000000000000000000000000000000 ()"];
	53 -> 58;
	59 [label="VAR_DECLARE:  OUTPUT PORT"];
	2 -> 59;
	60 [label="IDENTIFIERS: operand_b"];
	59 -> 60;
	61 [label="BINARY_OPERATION: MIN"];
	59 -> 61;
	62 [label="NUMBERS: 00000000000000000000000000100000 ()"];
	61 -> 62;
	63 [label="NUMBERS: 00000000000000000000000000000001 ()"];
	61 -> 63;
	64 [label="NUMBERS: 00000000000000000000000000000000 ()"];
	59 -> 64;
	65 [label="VAR_DECLARE:  OUTPUT PORT"];
	2 -> 65;
	66 [label="IDENTIFIERS: muxed_b"];
	65 -> 66;
	67 [label="BINARY_OPERATION: MIN"];
	65 -> 67;
	68 [label="NUMBERS: 00000000000000000000000000100000 ()"];
	67 -> 68;
	69 [label="NUMBERS: 00000000000000000000000000000001 ()"];
	67 -> 69;
	70 [label="NUMBERS: 00000000000000000000000000000000 ()"];
	65 -> 70;
	71 [label="MODULE_ITEMS"];
	0 -> 71;
	72 [label="VAR_DECLARE_LIST"];
	71 -> 72;
	73 [label="VAR_DECLARE:  INPUT PORT"];
	72 -> 73;
	74 [label="IDENTIFIERS: clk"];
	73 -> 74;
	75 [label="VAR_DECLARE_LIST"];
	71 -> 75;
	76 [label="VAR_DECLARE:  INPUT PORT"];
	75 -> 76;
	77 [label="IDENTIFIERS: rst"];
	76 -> 77;
	78 [label="VAR_DECLARE_LIST"];
	71 -> 78;
	79 [label="VAR_DECLARE:  INPUT PORT"];
	78 -> 79;
	80 [label="IDENTIFIERS: id_freeze"];
	79 -> 80;
	81 [label="VAR_DECLARE_LIST"];
	71 -> 81;
	82 [label="VAR_DECLARE:  INPUT PORT"];
	81 -> 82;
	83 [label="IDENTIFIERS: ex_freeze"];
	82 -> 83;
	84 [label="VAR_DECLARE_LIST"];
	71 -> 84;
	85 [label="VAR_DECLARE:  INPUT PORT"];
	84 -> 85;
	86 [label="IDENTIFIERS: rf_dataa"];
	85 -> 86;
	87 [label="BINARY_OPERATION: MIN"];
	85 -> 87;
	88 [label="NUMBERS: 00000000000000000000000000100000 ()"];
	87 -> 88;
	89 [label="NUMBERS: 00000000000000000000000000000001 ()"];
	87 -> 89;
	90 [label="NUMBERS: 00000000000000000000000000000000 ()"];
	85 -> 90;
	91 [label="VAR_DECLARE_LIST"];
	71 -> 91;
	92 [label="VAR_DECLARE:  INPUT PORT"];
	91 -> 92;
	93 [label="IDENTIFIERS: rf_datab"];
	92 -> 93;
	94 [label="BINARY_OPERATION: MIN"];
	92 -> 94;
	95 [label="NUMBERS: 00000000000000000000000000100000 ()"];
	94 -> 95;
	96 [label="NUMBERS: 00000000000000000000000000000001 ()"];
	94 -> 96;
	97 [label="NUMBERS: 00000000000000000000000000000000 ()"];
	92 -> 97;
	98 [label="VAR_DECLARE_LIST"];
	71 -> 98;
	99 [label="VAR_DECLARE:  INPUT PORT"];
	98 -> 99;
	100 [label="IDENTIFIERS: ex_forw"];
	99 -> 100;
	101 [label="BINARY_OPERATION: MIN"];
	99 -> 101;
	102 [label="NUMBERS: 00000000000000000000000000100000 ()"];
	101 -> 102;
	103 [label="NUMBERS: 00000000000000000000000000000001 ()"];
	101 -> 103;
	104 [label="NUMBERS: 00000000000000000000000000000000 ()"];
	99 -> 104;
	105 [label="VAR_DECLARE_LIST"];
	71 -> 105;
	106 [label="VAR_DECLARE:  INPUT PORT"];
	105 -> 106;
	107 [label="IDENTIFIERS: wb_forw"];
	106 -> 107;
	108 [label="BINARY_OPERATION: MIN"];
	106 -> 108;
	109 [label="NUMBERS: 00000000000000000000000000100000 ()"];
	108 -> 109;
	110 [label="NUMBERS: 00000000000000000000000000000001 ()"];
	108 -> 110;
	111 [label="NUMBERS: 00000000000000000000000000000000 ()"];
	106 -> 111;
	112 [label="VAR_DECLARE_LIST"];
	71 -> 112;
	113 [label="VAR_DECLARE:  INPUT PORT"];
	112 -> 113;
	114 [label="IDENTIFIERS: simm"];
	113 -> 114;
	115 [label="BINARY_OPERATION: MIN"];
	113 -> 115;
	116 [label="NUMBERS: 00000000000000000000000000100000 ()"];
	115 -> 116;
	117 [label="NUMBERS: 00000000000000000000000000000001 ()"];
	115 -> 117;
	118 [label="NUMBERS: 00000000000000000000000000000000 ()"];
	113 -> 118;
	119 [label="VAR_DECLARE_LIST"];
	71 -> 119;
	120 [label="VAR_DECLARE:  INPUT PORT"];
	119 -> 120;
	121 [label="IDENTIFIERS: sel_a"];
	120 -> 121;
	122 [label="BINARY_OPERATION: MIN"];
	120 -> 122;
	123 [label="NUMBERS: 00000000000000000000000000000010 ()"];
	122 -> 123;
	124 [label="NUMBERS: 00000000000000000000000000000001 ()"];
	122 -> 124;
	125 [label="NUMBERS: 00000000000000000000000000000000 ()"];
	120 -> 125;
	126 [label="VAR_DECLARE_LIST"];
	71 -> 126;
	127 [label="VAR_DECLARE:  INPUT PORT"];
	126 -> 127;
	128 [label="IDENTIFIERS: sel_b"];
	127 -> 128;
	129 [label="BINARY_OPERATION: MIN"];
	127 -> 129;
	130 [label="NUMBERS: 00000000000000000000000000000010 ()"];
	129 -> 130;
	131 [label="NUMBERS: 00000000000000000000000000000001 ()"];
	129 -> 131;
	132 [label="NUMBERS: 00000000000000000000000000000000 ()"];
	127 -> 132;
	133 [label="VAR_DECLARE_LIST"];
	71 -> 133;
	134 [label="VAR_DECLARE:  OUTPUT PORT"];
	133 -> 134;
	135 [label="IDENTIFIERS: operand_a"];
	134 -> 135;
	136 [label="BINARY_OPERATION: MIN"];
	134 -> 136;
	137 [label="NUMBERS: 00000000000000000000000000100000 ()"];
	136 -> 137;
	138 [label="NUMBERS: 00000000000000000000000000000001 ()"];
	136 -> 138;
	139 [label="NUMBERS: 00000000000000000000000000000000 ()"];
	134 -> 139;
	140 [label="VAR_DECLARE_LIST"];
	71 -> 140;
	141 [label="VAR_DECLARE:  OUTPUT PORT"];
	140 -> 141;
	142 [label="IDENTIFIERS: operand_b"];
	141 -> 142;
	143 [label="BINARY_OPERATION: MIN"];
	141 -> 143;
	144 [label="NUMBERS: 00000000000000000000000000100000 ()"];
	143 -> 144;
	145 [label="NUMBERS: 00000000000000000000000000000001 ()"];
	143 -> 145;
	146 [label="NUMBERS: 00000000000000000000000000000000 ()"];
	141 -> 146;
	147 [label="VAR_DECLARE_LIST"];
	71 -> 147;
	148 [label="VAR_DECLARE:  OUTPUT PORT"];
	147 -> 148;
	149 [label="IDENTIFIERS: muxed_b"];
	148 -> 149;
	150 [label="BINARY_OPERATION: MIN"];
	148 -> 150;
	151 [label="NUMBERS: 00000000000000000000000000100000 ()"];
	150 -> 151;
	152 [label="NUMBERS: 00000000000000000000000000000001 ()"];
	150 -> 152;
	153 [label="NUMBERS: 00000000000000000000000000000000 ()"];
	148 -> 153;
	154 [label="VAR_DECLARE_LIST"];
	71 -> 154;
	155 [label="VAR_DECLARE:  REG"];
	154 -> 155;
	156 [label="IDENTIFIERS: operand_a"];
	155 -> 156;
	157 [label="BINARY_OPERATION: MIN"];
	155 -> 157;
	158 [label="NUMBERS: 00000000000000000000000000100000 ()"];
	157 -> 158;
	159 [label="NUMBERS: 00000000000000000000000000000001 ()"];
	157 -> 159;
	160 [label="NUMBERS: 00000000000000000000000000000000 ()"];
	155 -> 160;
	161 [label="VAR_DECLARE_LIST"];
	71 -> 161;
	162 [label="VAR_DECLARE:  REG"];
	161 -> 162;
	163 [label="IDENTIFIERS: operand_b"];
	162 -> 163;
	164 [label="BINARY_OPERATION: MIN"];
	162 -> 164;
	165 [label="NUMBERS: 00000000000000000000000000100000 ()"];
	164 -> 165;
	166 [label="NUMBERS: 00000000000000000000000000000001 ()"];
	164 -> 166;
	167 [label="NUMBERS: 00000000000000000000000000000000 ()"];
	162 -> 167;
	168 [label="VAR_DECLARE_LIST"];
	71 -> 168;
	169 [label="VAR_DECLARE:  REG"];
	168 -> 169;
	170 [label="IDENTIFIERS: muxed_a"];
	169 -> 170;
	171 [label="BINARY_OPERATION: MIN"];
	169 -> 171;
	172 [label="NUMBERS: 00000000000000000000000000100000 ()"];
	171 -> 172;
	173 [label="NUMBERS: 00000000000000000000000000000001 ()"];
	171 -> 173;
	174 [label="NUMBERS: 00000000000000000000000000000000 ()"];
	169 -> 174;
	175 [label="VAR_DECLARE_LIST"];
	71 -> 175;
	176 [label="VAR_DECLARE:  REG"];
	175 -> 176;
	177 [label="IDENTIFIERS: muxed_b"];
	176 -> 177;
	178 [label="BINARY_OPERATION: MIN"];
	176 -> 178;
	179 [label="NUMBERS: 00000000000000000000000000100000 ()"];
	178 -> 179;
	180 [label="NUMBERS: 00000000000000000000000000000001 ()"];
	178 -> 180;
	181 [label="NUMBERS: 00000000000000000000000000000000 ()"];
	176 -> 181;
	182 [label="VAR_DECLARE_LIST"];
	71 -> 182;
	183 [label="VAR_DECLARE:  REG"];
	182 -> 183;
	184 [label="IDENTIFIERS: saved_a"];
	183 -> 184;
	185 [label="VAR_DECLARE_LIST"];
	71 -> 185;
	186 [label="VAR_DECLARE:  REG"];
	185 -> 186;
	187 [label="IDENTIFIERS: saved_b"];
	186 -> 187;
	188 [label="ALWAYS"];
	71 -> 188;
	189 [label="DELAY_CONTROL"];
	188 -> 189;
	190 [label="POSEDGE"];
	189 -> 190;
	191 [label="IDENTIFIERS: clk"];
	190 -> 191;
	192 [label="BLOCK"];
	188 -> 192;
	193 [label="IF"];
	192 -> 193;
	194 [label="IDENTIFIERS: rst"];
	193 -> 194;
	195 [label="BLOCK"];
	193 -> 195;
	196 [label="NON_BLOCKING_STATEMENT"];
	195 -> 196;
	197 [label="IDENTIFIERS: operand_a"];
	196 -> 197;
	198 [label="NUMBERS: 00000000000000000000000000000000 ()"];
	196 -> 198;
	199 [label="NON_BLOCKING_STATEMENT"];
	195 -> 199;
	200 [label="IDENTIFIERS: saved_a"];
	199 -> 200;
	201 [label="NUMBERS: 0 ()"];
	199 -> 201;
	202 [label="IF"];
	193 -> 202;
	203 [label="BINARY_OPERATION: lAND"];
	202 -> 203;
	204 [label="BINARY_OPERATION: lAND"];
	203 -> 204;
	205 [label="UNARY_OPERATION: lNOT"];
	204 -> 205;
	206 [label="IDENTIFIERS: ex_freeze"];
	205 -> 206;
	207 [label="IDENTIFIERS: id_freeze"];
	204 -> 207;
	208 [label="UNARY_OPERATION: lNOT"];
	203 -> 208;
	209 [label="IDENTIFIERS: saved_a"];
	208 -> 209;
	210 [label="BLOCK"];
	202 -> 210;
	211 [label="NON_BLOCKING_STATEMENT"];
	210 -> 211;
	212 [label="IDENTIFIERS: operand_a"];
	211 -> 212;
	213 [label="IDENTIFIERS: muxed_a"];
	211 -> 213;
	214 [label="NON_BLOCKING_STATEMENT"];
	210 -> 214;
	215 [label="IDENTIFIERS: saved_a"];
	214 -> 215;
	216 [label="NUMBERS: 1 ()"];
	214 -> 216;
	217 [label="IF"];
	202 -> 217;
	218 [label="BINARY_OPERATION: lAND"];
	217 -> 218;
	219 [label="UNARY_OPERATION: lNOT"];
	218 -> 219;
	220 [label="IDENTIFIERS: ex_freeze"];
	219 -> 220;
	221 [label="UNARY_OPERATION: lNOT"];
	218 -> 221;
	222 [label="IDENTIFIERS: saved_a"];
	221 -> 222;
	223 [label="BLOCK"];
	217 -> 223;
	224 [label="NON_BLOCKING_STATEMENT"];
	223 -> 224;
	225 [label="IDENTIFIERS: operand_a"];
	224 -> 225;
	226 [label="IDENTIFIERS: muxed_a"];
	224 -> 226;
	227 [label="IF"];
	217 -> 227;
	228 [label="BINARY_OPERATION: lAND"];
	227 -> 228;
	229 [label="UNARY_OPERATION: lNOT"];
	228 -> 229;
	230 [label="IDENTIFIERS: ex_freeze"];
	229 -> 230;
	231 [label="UNARY_OPERATION: lNOT"];
	228 -> 231;
	232 [label="IDENTIFIERS: id_freeze"];
	231 -> 232;
	233 [label="NON_BLOCKING_STATEMENT"];
	227 -> 233;
	234 [label="IDENTIFIERS: saved_a"];
	233 -> 234;
	235 [label="NUMBERS: 0 ()"];
	233 -> 235;
	236 [label="ALWAYS"];
	71 -> 236;
	237 [label="DELAY_CONTROL"];
	236 -> 237;
	238 [label="POSEDGE"];
	237 -> 238;
	239 [label="IDENTIFIERS: clk"];
	238 -> 239;
	240 [label="BLOCK"];
	236 -> 240;
	241 [label="IF"];
	240 -> 241;
	242 [label="IDENTIFIERS: rst"];
	241 -> 242;
	243 [label="BLOCK"];
	241 -> 243;
	244 [label="NON_BLOCKING_STATEMENT"];
	243 -> 244;
	245 [label="IDENTIFIERS: operand_b"];
	244 -> 245;
	246 [label="NUMBERS: 00000000000000000000000000000000 ()"];
	244 -> 246;
	247 [label="NON_BLOCKING_STATEMENT"];
	243 -> 247;
	248 [label="IDENTIFIERS: saved_b"];
	247 -> 248;
	249 [label="NUMBERS: 0 ()"];
	247 -> 249;
	250 [label="IF"];
	241 -> 250;
	251 [label="BINARY_OPERATION: lAND"];
	250 -> 251;
	252 [label="BINARY_OPERATION: lAND"];
	251 -> 252;
	253 [label="UNARY_OPERATION: lNOT"];
	252 -> 253;
	254 [label="IDENTIFIERS: ex_freeze"];
	253 -> 254;
	255 [label="IDENTIFIERS: id_freeze"];
	252 -> 255;
	256 [label="UNARY_OPERATION: lNOT"];
	251 -> 256;
	257 [label="IDENTIFIERS: saved_b"];
	256 -> 257;
	258 [label="BLOCK"];
	250 -> 258;
	259 [label="NON_BLOCKING_STATEMENT"];
	258 -> 259;
	260 [label="IDENTIFIERS: operand_b"];
	259 -> 260;
	261 [label="IDENTIFIERS: muxed_b"];
	259 -> 261;
	262 [label="NON_BLOCKING_STATEMENT"];
	258 -> 262;
	263 [label="IDENTIFIERS: saved_b"];
	262 -> 263;
	264 [label="NUMBERS: 1 ()"];
	262 -> 264;
	265 [label="IF"];
	250 -> 265;
	266 [label="BINARY_OPERATION: lAND"];
	265 -> 266;
	267 [label="UNARY_OPERATION: lNOT"];
	266 -> 267;
	268 [label="IDENTIFIERS: ex_freeze"];
	267 -> 268;
	269 [label="UNARY_OPERATION: lNOT"];
	266 -> 269;
	270 [label="IDENTIFIERS: saved_b"];
	269 -> 270;
	271 [label="BLOCK"];
	265 -> 271;
	272 [label="NON_BLOCKING_STATEMENT"];
	271 -> 272;
	273 [label="IDENTIFIERS: operand_b"];
	272 -> 273;
	274 [label="IDENTIFIERS: muxed_b"];
	272 -> 274;
	275 [label="IF"];
	265 -> 275;
	276 [label="BINARY_OPERATION: lAND"];
	275 -> 276;
	277 [label="UNARY_OPERATION: lNOT"];
	276 -> 277;
	278 [label="IDENTIFIERS: ex_freeze"];
	277 -> 278;
	279 [label="UNARY_OPERATION: lNOT"];
	276 -> 279;
	280 [label="IDENTIFIERS: id_freeze"];
	279 -> 280;
	281 [label="NON_BLOCKING_STATEMENT"];
	275 -> 281;
	282 [label="IDENTIFIERS: saved_b"];
	281 -> 282;
	283 [label="NUMBERS: 0 ()"];
	281 -> 283;
	284 [label="ALWAYS"];
	71 -> 284;
	285 [label="DELAY_CONTROL"];
	284 -> 285;
	286 [label="IDENTIFIERS: ex_forw"];
	285 -> 286;
	287 [label="IDENTIFIERS: wb_forw"];
	285 -> 287;
	288 [label="IDENTIFIERS: rf_dataa"];
	285 -> 288;
	289 [label="IDENTIFIERS: sel_a"];
	285 -> 289;
	290 [label="BLOCK"];
	284 -> 290;
	291 [label="CASE"];
	290 -> 291;
	292 [label="IDENTIFIERS: sel_a"];
	291 -> 292;
	293 [label="CASE_LIST"];
	291 -> 293;
	294 [label="CASE_ITEM"];
	293 -> 294;
	295 [label="NUMBERS: 10 ()"];
	294 -> 295;
	296 [label="BLOCKING_STATEMENT"];
	294 -> 296;
	297 [label="IDENTIFIERS: muxed_a"];
	296 -> 297;
	298 [label="IDENTIFIERS: ex_forw"];
	296 -> 298;
	299 [label="CASE_ITEM"];
	293 -> 299;
	300 [label="NUMBERS: 11 ()"];
	299 -> 300;
	301 [label="BLOCKING_STATEMENT"];
	299 -> 301;
	302 [label="IDENTIFIERS: muxed_a"];
	301 -> 302;
	303 [label="IDENTIFIERS: wb_forw"];
	301 -> 303;
	304 [label="CASE_DEFAULT"];
	293 -> 304;
	305 [label="BLOCKING_STATEMENT"];
	304 -> 305;
	306 [label="IDENTIFIERS: muxed_a"];
	305 -> 306;
	307 [label="IDENTIFIERS: rf_dataa"];
	305 -> 307;
	308 [label="ALWAYS"];
	71 -> 308;
	309 [label="DELAY_CONTROL"];
	308 -> 309;
	310 [label="IDENTIFIERS: simm"];
	309 -> 310;
	311 [label="IDENTIFIERS: ex_forw"];
	309 -> 311;
	312 [label="IDENTIFIERS: wb_forw"];
	309 -> 312;
	313 [label="IDENTIFIERS: rf_datab"];
	309 -> 313;
	314 [label="IDENTIFIERS: sel_b"];
	309 -> 314;
	315 [label="BLOCK"];
	308 -> 315;
	316 [label="CASE"];
	315 -> 316;
	317 [label="IDENTIFIERS: sel_b"];
	316 -> 317;
	318 [label="CASE_LIST"];
	316 -> 318;
	319 [label="CASE_ITEM"];
	318 -> 319;
	320 [label="NUMBERS: 01 ()"];
	319 -> 320;
	321 [label="BLOCKING_STATEMENT"];
	319 -> 321;
	322 [label="IDENTIFIERS: muxed_b"];
	321 -> 322;
	323 [label="IDENTIFIERS: simm"];
	321 -> 323;
	324 [label="CASE_ITEM"];
	318 -> 324;
	325 [label="NUMBERS: 10 ()"];
	324 -> 325;
	326 [label="BLOCKING_STATEMENT"];
	324 -> 326;
	327 [label="IDENTIFIERS: muxed_b"];
	326 -> 327;
	328 [label="IDENTIFIERS: ex_forw"];
	326 -> 328;
	329 [label="CASE_ITEM"];
	318 -> 329;
	330 [label="NUMBERS: 11 ()"];
	329 -> 330;
	331 [label="BLOCKING_STATEMENT"];
	329 -> 331;
	332 [label="IDENTIFIERS: muxed_b"];
	331 -> 332;
	333 [label="IDENTIFIERS: wb_forw"];
	331 -> 333;
	334 [label="CASE_DEFAULT"];
	318 -> 334;
	335 [label="BLOCKING_STATEMENT"];
	334 -> 335;
	336 [label="IDENTIFIERS: muxed_b"];
	335 -> 336;
	337 [label="IDENTIFIERS: rf_datab"];
	335 -> 337;
}
